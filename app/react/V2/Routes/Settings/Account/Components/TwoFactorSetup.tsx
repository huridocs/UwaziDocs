import React, { useEffect, useState } from 'react';
import api from 'app/utils/api';
import { useRevalidator } from 'react-router-dom';
import { useSetRecoilState } from 'recoil';

import { RequestParams } from 'app/utils/RequestParams';

import { notificationAtom } from 'app/V2/atoms';

import { Button, Card, CopyValueInput } from 'app/V2/Components/UI';
import { Translate } from 'app/I18N';
import loadable from '@loadable/component';
import { InputField } from 'app/V2/Components/Forms';

const QRCodeSVG = loadable(
  async () => import(/* webpackChunkName: "qrcode.react" */ 'qrcode.react'),
  {
    resolveComponent: components => components.QRCodeSVG,
  }
);

interface TwoFactorSetupProps {
  closePanel: () => void;
}

const TwoFactorSetup = ({ closePanel }: TwoFactorSetupProps) => {
  const [token, setToken] = useState('');
  const [_secret, setSecret] = useState('');
  const [_otpauth, setOtpauth] = useState('');
  const setNotifications = useSetRecoilState(notificationAtom);
  const revalidator = useRevalidator();

  useEffect(() => {
    api
      .post('auth2fa-secret')
      .then((resp: Response) => resp.json)
      .then(({ otpauth, secret }: { otpauth: string; secret: string }) => {
        setSecret(secret);
        setOtpauth(otpauth);
      })
      .catch((error: Error) => {
        throw error;
      });
  }, []);

  const enable2fa = async () => {
    try {
      await api.post('auth2fa-enable', new RequestParams({ token }));
      revalidator.revalidate();
      closePanel();
      setNotifications({
        type: 'success',
        text: <Translate>2FA Enabled</Translate>,
      });
    } catch (error) {
      if (error.status === 409) {
        setNotifications({
          type: 'error',
          text: <Translate>The token does not validate against the secret key</Translate>,
        });
      }
      throw error;
    }
  };

  return (
    <div className="relative h-full">
      <div className="grid gap-4 sm:grid-cols-3 sm:gap-6">
        <Card
          className="mb-4 sm:col-span-2"
          title={<Translate>Using Google Authenticator</Translate>}
        >
          <ol className="list-decimal list-inside">
            <li className="mb-4">
              <Translate>
                Download the Google Authenticator app from the App Store or Google Play Store.
              </Translate>
            </li>
            <li className="mb-4">
              <Translate>
                Open the Google Authenticator app and select "Add Account" (usually a plus symbol).
              </Translate>
            </li>
            <li className="mb-4">
              <Translate>
                Scan the following QR code selecting the option "Scan a barcode" option.
              </Translate>
            </li>
          </ol>
        </Card>
        <Card className="mb-4 sm:col-span-1" title={<Translate>QR Code</Translate>}>
          <div className="flex justify-center">
            <QRCodeSVG
              value={_otpauth}
              level="Q"
              includeMargin={false}
              size={180}
              bgColor="white"
              fgColor="black"
            />
          </div>
        </Card>
        <Card className="mb-4 sm:col-span-3" title={<Translate>Secret keys</Translate>}>
          <Translate className="block">
            You can also enter this secret key into your Authenticator app.
          </Translate>
          <Translate className="block italic">
            *please keep this key secret and don't share it.
          </Translate>
          <CopyValueInput
            value={_secret}
            className="w-full mb-4"
            label="authenticator secret"
            hideLabel
            id="authenticator-secret"
          />
          <Translate className="font-bold">
            Enter the 6-digit verification code generated by your Authenticator app
          </Translate>
          <InputField
            onChange={e => setToken(e.target.value)}
            className="mb-4"
            id="authenticator-token"
            hideLabel
            label="authenticator token"
            name="token"
            autoComplete="off"
            value={token}
          />
        </Card>
      </div>
      <div className="absolute bottom-0 flex w-full gap-2">
        <Button styling="light" onClick={closePanel} className="grow">
          <Translate>Cancel</Translate>
        </Button>
        <Button className="grow" disabled={!token} onClick={enable2fa}>
          <Translate>Enable</Translate>
        </Button>
      </div>
    </div>
  );
};

export { TwoFactorSetup };
