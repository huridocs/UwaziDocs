import React, { useEffect, useState } from 'react';
import { Button, Card, CopyValueInput } from 'app/V2/Components/UI';
import { Translate } from 'app/I18N';
import loadable from '@loadable/component';
import { InputField } from 'app/V2/Components/Forms';
import api from 'app/utils/api';
import { RequestParams } from 'app/utils/RequestParams';
import { useFetcher } from 'react-router-dom';

const QRCodeSVG = loadable(
  async () => import(/* webpackChunkName: "qrcode.react" */ 'qrcode.react'),
  {
    resolveComponent: components => components.QRCodeSVG,
  }
);

//const otpauth = 'otpauth://totp/Uwazi:admin?secret=PJKFAVBTIUZXA3DGIZGXC4KUF5XEG2LQ&issuer=Uwazi';

interface TwoFactorSetupProps {
  onCancel: () => void;
}

const TwoFactorSetup = ({ onCancel }: TwoFactorSetupProps) => {
  const [token, setToken] = useState('');
  const [_secret, setSecret] = useState('');
  const [_otpauth, setOtpauth] = useState('');
  const fetcher = useFetcher();

  useEffect(() => {
    api
      .post('auth2fa-secret')
      .then((resp: Response) => resp.json)
      .then(({ otpauth, secret }: { otpauth: string; secret: string }) => {
        setSecret(secret);
        setOtpauth(otpauth);
      });
  }, []);

  const enable2fa = async () => {
    const formData = new FormData();
    formData.set('intent', '2fa');
    formData.set('token', token);
    fetcher.submit(formData, { method: 'post' });
  };

  return (
    <div className="relative h-full">
      <div className="grid gap-4 sm:grid-cols-3 sm:gap-6">
        <Card
          className="mb-4 sm:col-span-2"
          title={<Translate>Using Google Authenticator</Translate>}
        >
          <ol className="list-decimal list-inside">
            <li className="mb-4">
              <Translate>
                Download the Google Authenticator app from the App Store or Google Play Store.
              </Translate>
            </li>
            <li className="mb-4">
              <Translate>
                Open the Google Authenticator app and select "Add Account" (usually a plus symbol).
              </Translate>
            </li>
            <li className="mb-4">
              <Translate>
                Scan the following QR code selecting the option "Scan a barcode" option.
              </Translate>
            </li>
          </ol>
        </Card>
        <Card className="mb-4 sm:col-span-1" title={<Translate>QR Code</Translate>}>
          <div className="flex justify-center">
            <QRCodeSVG
              value={_otpauth}
              level="Q"
              includeMargin={false}
              size={180}
              bgColor="white"
              fgColor="black"
            />
          </div>
        </Card>
        <Card className="mb-4 sm:col-span-3" title={<Translate>Secret keys</Translate>}>
          <Translate className="block">
            You can also enter this secret key into your Authenticator app.
          </Translate>
          <Translate className="italic block">
            *please keep this key secret and don't share it.
          </Translate>
          <CopyValueInput value={_secret} />
          <Translate className="font-bold">
            Enter the 6-digit verification code generated by your Authenticator app
          </Translate>
          <InputField
            onChange={e => setToken(e.target.value)}
            className="mb-4"
            id="authenticator-key"
            hideLabel
            label="authenticator key"
            value={token}
          />
        </Card>
      </div>
      <div className="flex gap-2 absolute bottom-0 w-full">
        <Button buttonStyle="tertiary" onClick={onCancel} className="grow">
          <Translate>Cancel</Translate>
        </Button>
        <Button className="grow" disabled={!token} onClick={enable2fa}>
          <Translate>Enable</Translate>
        </Button>
      </div>
    </div>
  );
};

export { TwoFactorSetup };
