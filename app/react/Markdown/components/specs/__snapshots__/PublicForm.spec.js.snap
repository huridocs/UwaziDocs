// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PublicForm should enable remote captcha 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <PublicForm
    attachments={false}
    file={false}
    remote={true}
    submit={[Function]}
    template={
      Immutable.Map {
        "_id": "123",
        "commonProperties": Immutable.List [
          Immutable.Map {
            "label": "Title changed",
            "name": "title",
            "generatedId": false,
          },
        ],
        "properties": Immutable.List [
          Immutable.Map {
            "type": "text",
            "name": "text",
          },
          Immutable.Map {
            "type": "image",
            "name": "image",
          },
        ],
      }
    }
    thesauris={Immutable.List []}
  >
    <LocalForm
      getDispatch={[Function]}
      initialState={Object {}}
      model="publicform"
      onSubmit={[Function]}
      validators={
        Object {
          "captcha": Object {
            "required": [Function],
          },
          "title": Object {
            "required": [Function],
          },
        }
      }
    >
      <Connect(Form)
        getDispatch={[Function]}
        model="publicform"
        onSubmit={[Function]}
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
        validators={
          Object {
            "captcha": Object {
              "required": [Function],
            },
            "title": Object {
              "required": [Function],
            },
          }
        }
      >
        <Form
          component="form"
          dispatch={[Function]}
          formValue={
            Object {
              "$form": Object {
                "errors": false,
                "focus": false,
                "initialValue": Object {
                  "captcha": null,
                  "title": null,
                },
                "intents": Array [],
                "model": "publicform",
                "pending": false,
                "pristine": true,
                "retouched": false,
                "submitFailed": false,
                "submitted": false,
                "touched": false,
                "valid": false,
                "validated": true,
                "validating": false,
                "validity": true,
                "value": Object {
                  "captcha": null,
                  "title": null,
                },
              },
              "captcha": Object {
                "errors": Object {
                  "required": true,
                },
                "focus": false,
                "initialValue": null,
                "intents": Array [],
                "model": "publicform.captcha",
                "pending": false,
                "pristine": true,
                "retouched": false,
                "submitFailed": false,
                "submitted": false,
                "touched": false,
                "valid": false,
                "validated": true,
                "validating": false,
                "validity": Object {
                  "required": false,
                },
                "value": null,
              },
              "title": Object {
                "errors": Object {
                  "required": true,
                },
                "focus": false,
                "initialValue": null,
                "intents": Array [],
                "model": "publicform.title",
                "pending": false,
                "pristine": true,
                "retouched": false,
                "submitFailed": false,
                "submitted": false,
                "touched": false,
                "valid": false,
                "validated": true,
                "validating": false,
                "validity": Object {
                  "required": false,
                },
                "value": null,
              },
            }
          }
          getDispatch={[Function]}
          model="publicform"
          modelValue={Object {}}
          onSubmit={[Function]}
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            }
          }
          storeSubscription={
            Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": undefined,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(observable): [Function],
              },
              "unsubscribe": [Function],
            }
          }
          validateOn="change"
          validators={
            Object {
              "captcha": Object {
                "required": [Function],
              },
              "title": Object {
                "required": [Function],
              },
            }
          }
        >
          <form
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <div
              className="public-form"
            >
              <Connect(FormGroup)
                key="title"
                model=".title"
              >
                <FormGroup
                  className=""
                  dispatch={[Function]}
                  hasError={false}
                  model=".title"
                >
                  <Modeled(Connect(Control))
                    component={[Function]}
                    mapProps={
                      Object {
                        "className": [Function],
                      }
                    }
                    model=".title"
                  >
                    <Connect(Control)
                      component={[Function]}
                      mapProps={
                        Object {
                          "className": [Function],
                        }
                      }
                      model="publicform.title"
                      store={
                        Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(observable): [Function],
                        }
                      }
                    >
                      <Control
                        asyncValidateOn="blur"
                        changeAction={[Function]}
                        component={[Function]}
                        controlProps={
                          Object {
                            "children": <ul
                              className="search__filter"
                            >
                              <li>
                                <label
                                  htmlFor="title"
                                >
                                  <Connect(Translate)
                                    context="123"
                                  >
                                    Title changed
                                  </Connect(Translate)>
                                  <span
                                    className="required"
                                  >
                                    *
                                  </span>
                                </label>
                              </li>
                              <li
                                className="wide"
                              >
                                <DefaultConnectedControlText
                                  className="form-control"
                                  id="title"
                                  model=".title"
                                />
                              </li>
                            </ul>,
                          }
                        }
                        dispatch={[Function]}
                        dynamic={false}
                        fieldValue={
                          Object {
                            "errors": Object {
                              "required": true,
                            },
                            "focus": false,
                            "initialValue": null,
                            "intents": Array [],
                            "model": "publicform.title",
                            "pending": false,
                            "pristine": true,
                            "retouched": false,
                            "submitFailed": false,
                            "submitted": false,
                            "touched": false,
                            "valid": false,
                            "validated": true,
                            "validating": false,
                            "validity": Object {
                              "required": false,
                            },
                            "value": null,
                          }
                        }
                        getValue={[Function]}
                        ignore={Array []}
                        isToggle={false}
                        mapProps={
                          Object {
                            "className": [Function],
                          }
                        }
                        model="publicform.title"
                        parser={[Function]}
                        persist={false}
                        store={
                          Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          }
                        }
                        storeSubscription={
                          Subscription {
                            "listeners": Object {
                              "clear": [Function],
                              "get": [Function],
                              "notify": [Function],
                              "subscribe": [Function],
                            },
                            "onStateChange": [Function],
                            "parentSub": undefined,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                            "unsubscribe": [Function],
                          }
                        }
                        updateOn="change"
                        updateOnEnter={true}
                        withField={true}
                      >
                        <ComponentWrapper
                          className=""
                          component={[Function]}
                        >
                          <Component
                            className=""
                          >
                            <div
                              className="form-group  "
                            >
                              <ul
                                className="search__filter"
                              >
                                <li>
                                  <label
                                    htmlFor="title"
                                  >
                                    <Connect(Translate)
                                      context="123"
                                    >
                                      <Translate
                                        context="123"
                                        edit={[Function]}
                                        i18nmode={false}
                                        translationKey="Title changed"
                                      >
                                        <span
                                          className="translation"
                                          onClick={[Function]}
                                        >
                                          Title changed
                                        </span>
                                      </Translate>
                                    </Connect(Translate)>
                                    <span
                                      className="required"
                                    >
                                      *
                                    </span>
                                  </label>
                                </li>
                                <li
                                  className="wide"
                                >
                                  <DefaultConnectedControlText
                                    className="form-control"
                                    id="title"
                                    model=".title"
                                  >
                                    <Modeled(Connect(Control))
                                      className="form-control"
                                      component="input"
                                      id="title"
                                      mapProps={
                                        Object {
                                          "disabled": [Function],
                                          "name": [Function],
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onFocus": [Function],
                                          "onKeyPress": [Function],
                                          "type": "text",
                                          "value": [Function],
                                        }
                                      }
                                      model=".title"
                                    >
                                      <Connect(Control)
                                        className="form-control"
                                        component="input"
                                        id="title"
                                        mapProps={
                                          Object {
                                            "disabled": [Function],
                                            "name": [Function],
                                            "onBlur": [Function],
                                            "onChange": [Function],
                                            "onFocus": [Function],
                                            "onKeyPress": [Function],
                                            "type": "text",
                                            "value": [Function],
                                          }
                                        }
                                        model="publicform.title"
                                        store={
                                          Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          }
                                        }
                                      >
                                        <Control
                                          asyncValidateOn="blur"
                                          changeAction={[Function]}
                                          className="form-control"
                                          component="input"
                                          controlProps={
                                            Object {
                                              "className": "form-control",
                                              "id": "title",
                                            }
                                          }
                                          dispatch={[Function]}
                                          dynamic={false}
                                          fieldValue={
                                            Object {
                                              "errors": Object {
                                                "required": true,
                                              },
                                              "focus": false,
                                              "initialValue": null,
                                              "intents": Array [],
                                              "model": "publicform.title",
                                              "pending": false,
                                              "pristine": true,
                                              "retouched": false,
                                              "submitFailed": false,
                                              "submitted": false,
                                              "touched": false,
                                              "valid": false,
                                              "validated": true,
                                              "validating": false,
                                              "validity": Object {
                                                "required": false,
                                              },
                                              "value": null,
                                            }
                                          }
                                          getValue={[Function]}
                                          id="title"
                                          ignore={Array []}
                                          isToggle={false}
                                          mapProps={
                                            Object {
                                              "disabled": [Function],
                                              "name": [Function],
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "onFocus": [Function],
                                              "onKeyPress": [Function],
                                              "type": "text",
                                              "value": [Function],
                                            }
                                          }
                                          model="publicform.title"
                                          parser={[Function]}
                                          persist={false}
                                          store={
                                            Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            }
                                          }
                                          storeSubscription={
                                            Subscription {
                                              "listeners": Object {
                                                "clear": [Function],
                                                "get": [Function],
                                                "notify": [Function],
                                                "subscribe": [Function],
                                              },
                                              "onStateChange": [Function],
                                              "parentSub": undefined,
                                              "store": Object {
                                                "dispatch": [Function],
                                                "getState": [Function],
                                                "replaceReducer": [Function],
                                                "subscribe": [Function],
                                                Symbol(observable): [Function],
                                              },
                                              "unsubscribe": [Function],
                                            }
                                          }
                                          updateOn="change"
                                          updateOnEnter={true}
                                          withField={true}
                                        >
                                          <ComponentWrapper
                                            className="form-control"
                                            component="input"
                                            disabled={false}
                                            id="title"
                                            name="publicform.title"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyPress={[Function]}
                                            type="text"
                                            value=""
                                          >
                                            <input
                                              className="form-control"
                                              disabled={false}
                                              id="title"
                                              name="publicform.title"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyPress={[Function]}
                                              type="text"
                                              value=""
                                            />
                                          </ComponentWrapper>
                                        </Control>
                                      </Connect(Control)>
                                    </Modeled(Connect(Control))>
                                  </DefaultConnectedControlText>
                                </li>
                              </ul>
                            </div>
                          </Component>
                        </ComponentWrapper>
                      </Control>
                    </Connect(Control)>
                  </Modeled(Connect(Control))>
                </FormGroup>
              </Connect(FormGroup)>
              <Connect(MetadataFormFields)
                boundChange={[Function]}
                model="publicform"
                template={
                  Immutable.Map {
                    "_id": "123",
                    "commonProperties": Immutable.List [
                      Immutable.Map {
                        "label": "Title changed",
                        "name": "title",
                        "generatedId": false,
                      },
                    ],
                    "properties": Immutable.List [
                      Immutable.Map {
                        "type": "text",
                        "name": "text",
                      },
                      Immutable.Map {
                        "type": "image",
                        "name": "image",
                      },
                    ],
                  }
                }
                thesauris={Immutable.List []}
              >
                <MetadataFormFields
                  attachments={Immutable.List []}
                  boundChange={[Function]}
                  change={[Function]}
                  dateFormat="dateFormat"
                  entityThesauris={Immutable.Map {}}
                  highlightedProps={Array []}
                  localAttachments={Array []}
                  locale="en"
                  model="publicform"
                  multipleEdition={false}
                  storeKey=""
                  template={
                    Immutable.Map {
                      "_id": "123",
                      "commonProperties": Immutable.List [
                        Immutable.Map {
                          "label": "Title changed",
                          "name": "title",
                          "generatedId": false,
                        },
                      ],
                      "properties": Immutable.List [
                        Immutable.Map {
                          "type": "text",
                          "name": "text",
                        },
                        Immutable.Map {
                          "type": "image",
                          "name": "image",
                        },
                      ],
                    }
                  }
                  thesauris={Immutable.List []}
                >
                  <div>
                    <Connect(FormGroup)
                      className="text"
                      key="text"
                      model=".metadata.text"
                    >
                      <FormGroup
                        className="text"
                        dispatch={[Function]}
                        hasError={false}
                        model=".metadata.text"
                      >
                        <Modeled(Connect(Control))
                          component={[Function]}
                          mapProps={
                            Object {
                              "className": [Function],
                            }
                          }
                          model=".metadata.text"
                        >
                          <Connect(Control)
                            component={[Function]}
                            mapProps={
                              Object {
                                "className": [Function],
                              }
                            }
                            model="publicform.metadata.text"
                            store={
                              Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              }
                            }
                          >
                            <Control
                              asyncValidateOn="blur"
                              changeAction={[Function]}
                              component={[Function]}
                              controlProps={
                                Object {
                                  "children": <ul
                                    className="search__filter is-active "
                                  >
                                    <li
                                      className="title"
                                    >
                                      <label>
                                        <Connect(MultipleEditionFieldWarningBase)
                                          field="metadata.text"
                                          model="publicform"
                                          multipleEdition={false}
                                        />
                                        <Connect(Translate)
                                          context="123"
                                        />
                                        
                                      </label>
                                    </li>
                                    <li
                                      className="wide"
                                    >
                                      <div
                                        className="metadata-extractor-container"
                                      >
                                        <Modeled(Connect(Field))
                                          model=".metadata.text"
                                        >
                                          <input
                                            className="form-control"
                                            type="text"
                                          />
                                        </Modeled(Connect(Field))>
                                      </div>
                                    </li>
                                  </ul>,
                                }
                              }
                              dispatch={[Function]}
                              dynamic={false}
                              fieldValue={
                                Object {
                                  "errors": Object {},
                                  "focus": false,
                                  "intents": Array [],
                                  "pending": false,
                                  "pristine": true,
                                  "retouched": false,
                                  "submitFailed": false,
                                  "submitted": false,
                                  "touched": false,
                                  "valid": true,
                                  "validated": false,
                                  "validating": false,
                                  "validity": Object {},
                                }
                              }
                              getValue={[Function]}
                              ignore={Array []}
                              isToggle={false}
                              mapProps={
                                Object {
                                  "className": [Function],
                                }
                              }
                              model="publicform.metadata.text"
                              parser={[Function]}
                              persist={false}
                              store={
                                Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                }
                              }
                              storeSubscription={
                                Subscription {
                                  "listeners": Object {
                                    "clear": [Function],
                                    "get": [Function],
                                    "notify": [Function],
                                    "subscribe": [Function],
                                  },
                                  "onStateChange": [Function],
                                  "parentSub": undefined,
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                  "unsubscribe": [Function],
                                }
                              }
                              updateOn="change"
                              updateOnEnter={true}
                              withField={true}
                            >
                              <ComponentWrapper
                                className=""
                                component={[Function]}
                              >
                                <Component
                                  className=""
                                >
                                  <div
                                    className="form-group text "
                                  >
                                    <ul
                                      className="search__filter is-active "
                                    >
                                      <li
                                        className="title"
                                      >
                                        <label>
                                          <Connect(MultipleEditionFieldWarningBase)
                                            field="metadata.text"
                                            model="publicform"
                                            multipleEdition={false}
                                          >
                                            <MultipleEditionFieldWarningBase
                                              dispatch={[Function]}
                                              field="metadata.text"
                                              model="publicform"
                                              multipleEdition={false}
                                              touched={false}
                                            />
                                          </Connect(MultipleEditionFieldWarningBase)>
                                          <Connect(Translate)
                                            context="123"
                                          >
                                            <Translate
                                              context="123"
                                              edit={[Function]}
                                              i18nmode={false}
                                              translationKey=""
                                            >
                                              <span
                                                className="translation"
                                                onClick={[Function]}
                                              />
                                            </Translate>
                                          </Connect(Translate)>
                                        </label>
                                      </li>
                                      <li
                                        className="wide"
                                      >
                                        <div
                                          className="metadata-extractor-container"
                                        >
                                          <Modeled(Connect(Field))
                                            model=".metadata.text"
                                          >
                                            <Connect(Field)
                                              model="publicform.metadata.text"
                                              store={
                                                Object {
                                                  "dispatch": [Function],
                                                  "getState": [Function],
                                                  "replaceReducer": [Function],
                                                  "subscribe": [Function],
                                                  Symbol(observable): [Function],
                                                }
                                              }
                                            >
                                              <Field
                                                asyncValidateOn="blur"
                                                changeAction={[Function]}
                                                component="div"
                                                dispatch={[Function]}
                                                dynamic={true}
                                                fieldValue={
                                                  Object {
                                                    "errors": Object {},
                                                    "focus": false,
                                                    "intents": Array [],
                                                    "pending": false,
                                                    "pristine": true,
                                                    "retouched": false,
                                                    "submitFailed": false,
                                                    "submitted": false,
                                                    "touched": false,
                                                    "valid": true,
                                                    "validated": false,
                                                    "validating": false,
                                                    "validity": Object {},
                                                  }
                                                }
                                                formatter={[Function]}
                                                model="publicform.metadata.text"
                                                parser={[Function]}
                                                store={
                                                  Object {
                                                    "dispatch": [Function],
                                                    "getState": [Function],
                                                    "replaceReducer": [Function],
                                                    "subscribe": [Function],
                                                    Symbol(observable): [Function],
                                                  }
                                                }
                                                storeSubscription={
                                                  Subscription {
                                                    "listeners": Object {
                                                      "clear": [Function],
                                                      "get": [Function],
                                                      "notify": [Function],
                                                      "subscribe": [Function],
                                                    },
                                                    "onStateChange": [Function],
                                                    "parentSub": undefined,
                                                    "store": Object {
                                                      "dispatch": [Function],
                                                      "getState": [Function],
                                                      "replaceReducer": [Function],
                                                      "subscribe": [Function],
                                                      Symbol(observable): [Function],
                                                    },
                                                    "unsubscribe": [Function],
                                                  }
                                                }
                                                updateOn="change"
                                              >
                                                <div>
                                                  <DefaultConnectedControl
                                                    asyncValidateOn="blur"
                                                    changeAction={[Function]}
                                                    component="input"
                                                    control={
                                                      <input
                                                        className="form-control"
                                                        type="text"
                                                      />
                                                    }
                                                    controlProps={
                                                      Object {
                                                        "className": "form-control",
                                                        "type": "text",
                                                      }
                                                    }
                                                    dispatch={[Function]}
                                                    dynamic={true}
                                                    fieldValue={
                                                      Object {
                                                        "errors": Object {},
                                                        "focus": false,
                                                        "intents": Array [],
                                                        "pending": false,
                                                        "pristine": true,
                                                        "retouched": false,
                                                        "submitFailed": false,
                                                        "submitted": false,
                                                        "touched": false,
                                                        "valid": true,
                                                        "validated": false,
                                                        "validating": false,
                                                        "validity": Object {},
                                                      }
                                                    }
                                                    formatter={[Function]}
                                                    mapProps={
                                                      Object {
                                                        "disabled": [Function],
                                                        "name": [Function],
                                                        "onBlur": [Function],
                                                        "onChange": [Function],
                                                        "onFocus": [Function],
                                                        "onKeyPress": [Function],
                                                        "value": [Function],
                                                      }
                                                    }
                                                    model="publicform.metadata.text"
                                                    parser={[Function]}
                                                    store={
                                                      Object {
                                                        "dispatch": [Function],
                                                        "getState": [Function],
                                                        "replaceReducer": [Function],
                                                        "subscribe": [Function],
                                                        Symbol(observable): [Function],
                                                      }
                                                    }
                                                    storeSubscription={
                                                      Subscription {
                                                        "listeners": Object {
                                                          "clear": [Function],
                                                          "get": [Function],
                                                          "notify": [Function],
                                                          "subscribe": [Function],
                                                        },
                                                        "onStateChange": [Function],
                                                        "parentSub": undefined,
                                                        "store": Object {
                                                          "dispatch": [Function],
                                                          "getState": [Function],
                                                          "replaceReducer": [Function],
                                                          "subscribe": [Function],
                                                          Symbol(observable): [Function],
                                                        },
                                                        "unsubscribe": [Function],
                                                      }
                                                    }
                                                    updateOn="change"
                                                  >
                                                    <Modeled(Connect(Control))
                                                      asyncValidateOn="blur"
                                                      changeAction={[Function]}
                                                      component="input"
                                                      control={
                                                        <input
                                                          className="form-control"
                                                          type="text"
                                                        />
                                                      }
                                                      controlProps={
                                                        Object {
                                                          "className": "form-control",
                                                          "type": "text",
                                                        }
                                                      }
                                                      dispatch={[Function]}
                                                      dynamic={true}
                                                      fieldValue={
                                                        Object {
                                                          "errors": Object {},
                                                          "focus": false,
                                                          "intents": Array [],
                                                          "pending": false,
                                                          "pristine": true,
                                                          "retouched": false,
                                                          "submitFailed": false,
                                                          "submitted": false,
                                                          "touched": false,
                                                          "valid": true,
                                                          "validated": false,
                                                          "validating": false,
                                                          "validity": Object {},
                                                        }
                                                      }
                                                      formatter={[Function]}
                                                      mapProps={
                                                        Object {
                                                          "disabled": [Function],
                                                          "name": [Function],
                                                          "onBlur": [Function],
                                                          "onChange": [Function],
                                                          "onFocus": [Function],
                                                          "onKeyPress": [Function],
                                                          "value": [Function],
                                                        }
                                                      }
                                                      model="publicform.metadata.text"
                                                      parser={[Function]}
                                                      store={
                                                        Object {
                                                          "dispatch": [Function],
                                                          "getState": [Function],
                                                          "replaceReducer": [Function],
                                                          "subscribe": [Function],
                                                          Symbol(observable): [Function],
                                                        }
                                                      }
                                                      storeSubscription={
                                                        Subscription {
                                                          "listeners": Object {
                                                            "clear": [Function],
                                                            "get": [Function],
                                                            "notify": [Function],
                                                            "subscribe": [Function],
                                                          },
                                                          "onStateChange": [Function],
                                                          "parentSub": undefined,
                                                          "store": Object {
                                                            "dispatch": [Function],
                                                            "getState": [Function],
                                                            "replaceReducer": [Function],
                                                            "subscribe": [Function],
                                                            Symbol(observable): [Function],
                                                          },
                                                          "unsubscribe": [Function],
                                                        }
                                                      }
                                                      updateOn="change"
                                                    >
                                                      <Connect(Control)
                                                        asyncValidateOn="blur"
                                                        changeAction={[Function]}
                                                        component="input"
                                                        control={
                                                          <input
                                                            className="form-control"
                                                            type="text"
                                                          />
                                                        }
                                                        controlProps={
                                                          Object {
                                                            "className": "form-control",
                                                            "type": "text",
                                                          }
                                                        }
                                                        dispatch={[Function]}
                                                        dynamic={true}
                                                        fieldValue={
                                                          Object {
                                                            "errors": Object {},
                                                            "focus": false,
                                                            "intents": Array [],
                                                            "pending": false,
                                                            "pristine": true,
                                                            "retouched": false,
                                                            "submitFailed": false,
                                                            "submitted": false,
                                                            "touched": false,
                                                            "valid": true,
                                                            "validated": false,
                                                            "validating": false,
                                                            "validity": Object {},
                                                          }
                                                        }
                                                        formatter={[Function]}
                                                        mapProps={
                                                          Object {
                                                            "disabled": [Function],
                                                            "name": [Function],
                                                            "onBlur": [Function],
                                                            "onChange": [Function],
                                                            "onFocus": [Function],
                                                            "onKeyPress": [Function],
                                                            "value": [Function],
                                                          }
                                                        }
                                                        model="publicform.metadata.text"
                                                        parser={[Function]}
                                                        store={
                                                          Object {
                                                            "dispatch": [Function],
                                                            "getState": [Function],
                                                            "replaceReducer": [Function],
                                                            "subscribe": [Function],
                                                            Symbol(observable): [Function],
                                                          }
                                                        }
                                                        storeSubscription={
                                                          Subscription {
                                                            "listeners": Object {
                                                              "clear": [Function],
                                                              "get": [Function],
                                                              "notify": [Function],
                                                              "subscribe": [Function],
                                                            },
                                                            "onStateChange": [Function],
                                                            "parentSub": undefined,
                                                            "store": Object {
                                                              "dispatch": [Function],
                                                              "getState": [Function],
                                                              "replaceReducer": [Function],
                                                              "subscribe": [Function],
                                                              Symbol(observable): [Function],
                                                            },
                                                            "unsubscribe": [Function],
                                                          }
                                                        }
                                                        updateOn="change"
                                                      >
                                                        <Control
                                                          asyncValidateOn="blur"
                                                          changeAction={[Function]}
                                                          component="input"
                                                          control={
                                                            <input
                                                              className="form-control"
                                                              type="text"
                                                            />
                                                          }
                                                          controlProps={
                                                            Object {
                                                              "className": "form-control",
                                                              "componentMap": undefined,
                                                              "storeSubscription": Subscription {
                                                                "listeners": Object {
                                                                  "clear": [Function],
                                                                  "get": [Function],
                                                                  "notify": [Function],
                                                                  "subscribe": [Function],
                                                                },
                                                                "onStateChange": [Function],
                                                                "parentSub": undefined,
                                                                "store": Object {
                                                                  "dispatch": [Function],
                                                                  "getState": [Function],
                                                                  "replaceReducer": [Function],
                                                                  "subscribe": [Function],
                                                                  Symbol(observable): [Function],
                                                                },
                                                                "unsubscribe": [Function],
                                                              },
                                                              "type": "text",
                                                            }
                                                          }
                                                          dispatch={[Function]}
                                                          dynamic={true}
                                                          fieldValue={
                                                            Object {
                                                              "errors": Object {},
                                                              "focus": false,
                                                              "intents": Array [],
                                                              "pending": false,
                                                              "pristine": true,
                                                              "retouched": false,
                                                              "submitFailed": false,
                                                              "submitted": false,
                                                              "touched": false,
                                                              "valid": true,
                                                              "validated": false,
                                                              "validating": false,
                                                              "validity": Object {},
                                                            }
                                                          }
                                                          formatter={[Function]}
                                                          getValue={[Function]}
                                                          ignore={Array []}
                                                          isToggle={false}
                                                          mapProps={
                                                            Object {
                                                              "disabled": [Function],
                                                              "name": [Function],
                                                              "onBlur": [Function],
                                                              "onChange": [Function],
                                                              "onFocus": [Function],
                                                              "onKeyPress": [Function],
                                                              "value": [Function],
                                                            }
                                                          }
                                                          model="publicform.metadata.text"
                                                          parser={[Function]}
                                                          persist={false}
                                                          store={
                                                            Object {
                                                              "dispatch": [Function],
                                                              "getState": [Function],
                                                              "replaceReducer": [Function],
                                                              "subscribe": [Function],
                                                              Symbol(observable): [Function],
                                                            }
                                                          }
                                                          storeSubscription={
                                                            Subscription {
                                                              "listeners": Object {
                                                                "clear": [Function],
                                                                "get": [Function],
                                                                "notify": [Function],
                                                                "subscribe": [Function],
                                                              },
                                                              "onStateChange": [Function],
                                                              "parentSub": Subscription {
                                                                "listeners": Object {
                                                                  "clear": [Function],
                                                                  "get": [Function],
                                                                  "notify": [Function],
                                                                  "subscribe": [Function],
                                                                },
                                                                "onStateChange": [Function],
                                                                "parentSub": undefined,
                                                                "store": Object {
                                                                  "dispatch": [Function],
                                                                  "getState": [Function],
                                                                  "replaceReducer": [Function],
                                                                  "subscribe": [Function],
                                                                  Symbol(observable): [Function],
                                                                },
                                                                "unsubscribe": [Function],
                                                              },
                                                              "store": Object {
                                                                "dispatch": [Function],
                                                                "getState": [Function],
                                                                "replaceReducer": [Function],
                                                                "subscribe": [Function],
                                                                Symbol(observable): [Function],
                                                              },
                                                              "unsubscribe": [Function],
                                                            }
                                                          }
                                                          updateOn="change"
                                                          updateOnEnter={true}
                                                          withField={true}
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            name="publicform.metadata.text"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            onKeyPress={[Function]}
                                                            type="text"
                                                            value=""
                                                          />
                                                        </Control>
                                                      </Connect(Control)>
                                                    </Modeled(Connect(Control))>
                                                  </DefaultConnectedControl>
                                                </div>
                                              </Field>
                                            </Connect(Field)>
                                          </Modeled(Connect(Field))>
                                        </div>
                                      </li>
                                    </ul>
                                  </div>
                                </Component>
                              </ComponentWrapper>
                            </Control>
                          </Connect(Control)>
                        </Modeled(Connect(Control))>
                      </FormGroup>
                    </Connect(FormGroup)>
                    <Connect(FormGroup)
                      className="image"
                      key="image"
                      model=".metadata.image"
                    >
                      <FormGroup
                        className="image"
                        dispatch={[Function]}
                        hasError={false}
                        model=".metadata.image"
                      >
                        <Modeled(Connect(Control))
                          component={[Function]}
                          mapProps={
                            Object {
                              "className": [Function],
                            }
                          }
                          model=".metadata.image"
                        >
                          <Connect(Control)
                            component={[Function]}
                            mapProps={
                              Object {
                                "className": [Function],
                              }
                            }
                            model="publicform.metadata.image"
                            store={
                              Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              }
                            }
                          >
                            <Control
                              asyncValidateOn="blur"
                              changeAction={[Function]}
                              component={[Function]}
                              controlProps={
                                Object {
                                  "children": <ul
                                    className="search__filter is-active "
                                  >
                                    <li
                                      className="title"
                                    >
                                      <label>
                                        <Connect(MultipleEditionFieldWarningBase)
                                          field="metadata.image"
                                          model="publicform"
                                          multipleEdition={false}
                                        />
                                        <Connect(Translate)
                                          context="123"
                                        />
                                        
                                      </label>
                                    </li>
                                    <li
                                      className="wide"
                                    >
                                      <div
                                        className="metadata-extractor-container"
                                      >
                                        <MediaField
                                          attachments={Array []}
                                          formModel="publicform"
                                          localAttachments={Array []}
                                          model=".metadata.image"
                                          multipleEdition={false}
                                          type={0}
                                        />
                                      </div>
                                    </li>
                                  </ul>,
                                }
                              }
                              dispatch={[Function]}
                              dynamic={false}
                              fieldValue={
                                Object {
                                  "errors": Object {},
                                  "focus": false,
                                  "intents": Array [],
                                  "pending": false,
                                  "pristine": true,
                                  "retouched": false,
                                  "submitFailed": false,
                                  "submitted": false,
                                  "touched": false,
                                  "valid": true,
                                  "validated": false,
                                  "validating": false,
                                  "validity": Object {},
                                }
                              }
                              getValue={[Function]}
                              ignore={Array []}
                              isToggle={false}
                              mapProps={
                                Object {
                                  "className": [Function],
                                }
                              }
                              model="publicform.metadata.image"
                              parser={[Function]}
                              persist={false}
                              store={
                                Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                }
                              }
                              storeSubscription={
                                Subscription {
                                  "listeners": Object {
                                    "clear": [Function],
                                    "get": [Function],
                                    "notify": [Function],
                                    "subscribe": [Function],
                                  },
                                  "onStateChange": [Function],
                                  "parentSub": undefined,
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                  "unsubscribe": [Function],
                                }
                              }
                              updateOn="change"
                              updateOnEnter={true}
                              withField={true}
                            >
                              <ComponentWrapper
                                className=""
                                component={[Function]}
                              >
                                <Component
                                  className=""
                                >
                                  <div
                                    className="form-group image "
                                  >
                                    <ul
                                      className="search__filter is-active "
                                    >
                                      <li
                                        className="title"
                                      >
                                        <label>
                                          <Connect(MultipleEditionFieldWarningBase)
                                            field="metadata.image"
                                            model="publicform"
                                            multipleEdition={false}
                                          >
                                            <MultipleEditionFieldWarningBase
                                              dispatch={[Function]}
                                              field="metadata.image"
                                              model="publicform"
                                              multipleEdition={false}
                                              touched={false}
                                            />
                                          </Connect(MultipleEditionFieldWarningBase)>
                                          <Connect(Translate)
                                            context="123"
                                          >
                                            <Translate
                                              context="123"
                                              edit={[Function]}
                                              i18nmode={false}
                                              translationKey=""
                                            >
                                              <span
                                                className="translation"
                                                onClick={[Function]}
                                              />
                                            </Translate>
                                          </Connect(Translate)>
                                        </label>
                                      </li>
                                      <li
                                        className="wide"
                                      >
                                        <div
                                          className="metadata-extractor-container"
                                        >
                                          <MediaField
                                            attachments={Array []}
                                            formModel="publicform"
                                            localAttachments={Array []}
                                            model=".metadata.image"
                                            multipleEdition={false}
                                            type={0}
                                          >
                                            <DefaultConnectedControl
                                              attachments={Array []}
                                              component={[Function]}
                                              formModel="publicform"
                                              localAttachments={Array []}
                                              model=".metadata.image"
                                              multipleEdition={false}
                                              type={0}
                                            >
                                              <Modeled(Connect(Control))
                                                attachments={Array []}
                                                component={[Function]}
                                                formModel="publicform"
                                                localAttachments={Array []}
                                                mapProps={
                                                  Object {
                                                    "disabled": [Function],
                                                    "name": [Function],
                                                    "onBlur": [Function],
                                                    "onChange": [Function],
                                                    "onFocus": [Function],
                                                    "onKeyPress": [Function],
                                                    "value": [Function],
                                                  }
                                                }
                                                model=".metadata.image"
                                                multipleEdition={false}
                                                type={0}
                                              >
                                                <Connect(Control)
                                                  attachments={Array []}
                                                  component={[Function]}
                                                  formModel="publicform"
                                                  localAttachments={Array []}
                                                  mapProps={
                                                    Object {
                                                      "disabled": [Function],
                                                      "name": [Function],
                                                      "onBlur": [Function],
                                                      "onChange": [Function],
                                                      "onFocus": [Function],
                                                      "onKeyPress": [Function],
                                                      "value": [Function],
                                                    }
                                                  }
                                                  model="publicform.metadata.image"
                                                  multipleEdition={false}
                                                  store={
                                                    Object {
                                                      "dispatch": [Function],
                                                      "getState": [Function],
                                                      "replaceReducer": [Function],
                                                      "subscribe": [Function],
                                                      Symbol(observable): [Function],
                                                    }
                                                  }
                                                  type={0}
                                                >
                                                  <Control
                                                    asyncValidateOn="blur"
                                                    attachments={Array []}
                                                    changeAction={[Function]}
                                                    component={[Function]}
                                                    controlProps={
                                                      Object {
                                                        "attachments": Array [],
                                                        "formModel": "publicform",
                                                        "localAttachments": Array [],
                                                        "multipleEdition": false,
                                                        "type": 0,
                                                      }
                                                    }
                                                    dispatch={[Function]}
                                                    dynamic={false}
                                                    fieldValue={
                                                      Object {
                                                        "errors": Object {},
                                                        "focus": false,
                                                        "intents": Array [],
                                                        "pending": false,
                                                        "pristine": true,
                                                        "retouched": false,
                                                        "submitFailed": false,
                                                        "submitted": false,
                                                        "touched": false,
                                                        "valid": true,
                                                        "validated": false,
                                                        "validating": false,
                                                        "validity": Object {},
                                                      }
                                                    }
                                                    formModel="publicform"
                                                    getValue={[Function]}
                                                    ignore={Array []}
                                                    isToggle={false}
                                                    localAttachments={Array []}
                                                    mapProps={
                                                      Object {
                                                        "disabled": [Function],
                                                        "name": [Function],
                                                        "onBlur": [Function],
                                                        "onChange": [Function],
                                                        "onFocus": [Function],
                                                        "onKeyPress": [Function],
                                                        "value": [Function],
                                                      }
                                                    }
                                                    model="publicform.metadata.image"
                                                    multipleEdition={false}
                                                    parser={[Function]}
                                                    persist={false}
                                                    store={
                                                      Object {
                                                        "dispatch": [Function],
                                                        "getState": [Function],
                                                        "replaceReducer": [Function],
                                                        "subscribe": [Function],
                                                        Symbol(observable): [Function],
                                                      }
                                                    }
                                                    storeSubscription={
                                                      Subscription {
                                                        "listeners": Object {
                                                          "clear": [Function],
                                                          "get": [Function],
                                                          "notify": [Function],
                                                          "subscribe": [Function],
                                                        },
                                                        "onStateChange": [Function],
                                                        "parentSub": undefined,
                                                        "store": Object {
                                                          "dispatch": [Function],
                                                          "getState": [Function],
                                                          "replaceReducer": [Function],
                                                          "subscribe": [Function],
                                                          Symbol(observable): [Function],
                                                        },
                                                        "unsubscribe": [Function],
                                                      }
                                                    }
                                                    type={0}
                                                    updateOn="change"
                                                    updateOnEnter={true}
                                                    withField={true}
                                                  >
                                                    <ComponentWrapper
                                                      attachments={Array []}
                                                      component={[Function]}
                                                      disabled={false}
                                                      formModel="publicform"
                                                      localAttachments={Array []}
                                                      multipleEdition={false}
                                                      name="publicform.metadata.image"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyPress={[Function]}
                                                      type={0}
                                                    >
                                                      <MediaField
                                                        attachments={Array []}
                                                        disabled={false}
                                                        formModel="publicform"
                                                        localAttachments={Array []}
                                                        multipleEdition={false}
                                                        name="publicform.metadata.image"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyPress={[Function]}
                                                        type={0}
                                                      >
                                                        <div
                                                          className="search__filter--selected__media"
                                                        >
                                                          <div
                                                            className="search__filter--selected__media-toolbar"
                                                          >
                                                            <button
                                                              className="btn"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <Connect(Icon)
                                                                icon="plus"
                                                              >
                                                                <Icon
                                                                  directionAware={false}
                                                                  icon="plus"
                                                                  locale="en"
                                                                >
                                                                  <FontAwesomeIcon
                                                                    beat={false}
                                                                    beatFade={false}
                                                                    border={false}
                                                                    bounce={false}
                                                                    className=""
                                                                    fade={false}
                                                                    fixedWidth={false}
                                                                    flip={null}
                                                                    icon="plus"
                                                                    inverse={false}
                                                                    listItem={false}
                                                                    mask={null}
                                                                    maskId={null}
                                                                    pull={null}
                                                                    pulse={false}
                                                                    rotation={null}
                                                                    shake={false}
                                                                    size={null}
                                                                    spin={false}
                                                                    spinPulse={false}
                                                                    spinReverse={false}
                                                                    swapOpacity={false}
                                                                    symbol={false}
                                                                    title=""
                                                                    titleId={null}
                                                                    transform={null}
                                                                  >
                                                                    <svg
                                                                      aria-hidden="true"
                                                                      className="svg-inline--fa fa-plus fa-w-14 "
                                                                      data-icon="plus"
                                                                      data-prefix="fas"
                                                                      focusable="false"
                                                                      role="img"
                                                                      style={Object {}}
                                                                      viewBox="0 0 448 512"
                                                                      xmlns="http://www.w3.org/2000/svg"
                                                                    >
                                                                      <path
                                                                        d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                                                                        fill="currentColor"
                                                                        style={Object {}}
                                                                      />
                                                                    </svg>
                                                                  </FontAwesomeIcon>
                                                                </Icon>
                                                              </Connect(Icon)>
                                                               
                                                              <Connect(Translate)>
                                                                <Translate
                                                                  context="System"
                                                                  edit={[Function]}
                                                                  i18nmode={true}
                                                                  translationKey="Add file"
                                                                >
                                                                  <span
                                                                    className="translation active"
                                                                    onClick={[Function]}
                                                                  >
                                                                    Add file
                                                                  </span>
                                                                </Translate>
                                                              </Connect(Translate)>
                                                            </button>
                                                          </div>
                                                          <Connect(MediaModalComponent)
                                                            attachments={Array []}
                                                            formField="publicform.metadata.image"
                                                            formModel="publicform"
                                                            isOpen={false}
                                                            multipleEdition={false}
                                                            onChange={[Function]}
                                                            onClose={[Function]}
                                                            type={0}
                                                          >
                                                            <MediaModalComponent
                                                              attachments={Array []}
                                                              formField="publicform.metadata.image"
                                                              formModel="publicform"
                                                              isOpen={false}
                                                              localAttachmentAction={[Function]}
                                                              multipleEdition={false}
                                                              onChange={[Function]}
                                                              onClose={[Function]}
                                                              rrfChange={[Function]}
                                                              type={0}
                                                            >
                                                              <Modal
                                                                ariaHideApp={false}
                                                                bodyOpenClassName="ReactModal__Body--open"
                                                                className="attachments-modal"
                                                                closeTimeoutMS={0}
                                                                contentElement={[Function]}
                                                                isOpen={false}
                                                                overlayClassName="attachments-modal__overlay"
                                                                overlayElement={[Function]}
                                                                parentSelector={[Function]}
                                                                portalClassName="ReactModalPortal"
                                                                preventScroll={false}
                                                                role="dialog"
                                                                shouldCloseOnEsc={true}
                                                                shouldCloseOnOverlayClick={true}
                                                                shouldFocusAfterRender={true}
                                                                shouldReturnFocusAfterClose={true}
                                                              >
                                                                <Portal
                                                                  containerInfo={
                                                                    <div
                                                                      class="ReactModalPortal"
                                                                    />
                                                                  }
                                                                >
                                                                  <ModalPortal
                                                                    ariaHideApp={false}
                                                                    bodyOpenClassName="ReactModal__Body--open"
                                                                    className="attachments-modal"
                                                                    closeTimeoutMS={0}
                                                                    contentElement={[Function]}
                                                                    defaultStyles={
                                                                      Object {
                                                                        "content": Object {
                                                                          "WebkitOverflowScrolling": "touch",
                                                                          "background": "#fff",
                                                                          "border": "1px solid #ccc",
                                                                          "borderRadius": "4px",
                                                                          "bottom": "40px",
                                                                          "left": "40px",
                                                                          "outline": "none",
                                                                          "overflow": "auto",
                                                                          "padding": "20px",
                                                                          "position": "absolute",
                                                                          "right": "40px",
                                                                          "top": "40px",
                                                                        },
                                                                        "overlay": Object {
                                                                          "backgroundColor": "rgba(255, 255, 255, 0.75)",
                                                                          "bottom": 0,
                                                                          "left": 0,
                                                                          "position": "fixed",
                                                                          "right": 0,
                                                                          "top": 0,
                                                                        },
                                                                      }
                                                                    }
                                                                    isOpen={false}
                                                                    overlayClassName="attachments-modal__overlay"
                                                                    overlayElement={[Function]}
                                                                    parentSelector={[Function]}
                                                                    portalClassName="ReactModalPortal"
                                                                    preventScroll={false}
                                                                    role="dialog"
                                                                    shouldCloseOnEsc={true}
                                                                    shouldCloseOnOverlayClick={true}
                                                                    shouldFocusAfterRender={true}
                                                                    shouldReturnFocusAfterClose={true}
                                                                    style={
                                                                      Object {
                                                                        "content": Object {},
                                                                        "overlay": Object {},
                                                                      }
                                                                    }
                                                                  />
                                                                </Portal>
                                                              </Modal>
                                                            </MediaModalComponent>
                                                          </Connect(MediaModalComponent)>
                                                        </div>
                                                      </MediaField>
                                                    </ComponentWrapper>
                                                  </Control>
                                                </Connect(Control)>
                                              </Modeled(Connect(Control))>
                                            </DefaultConnectedControl>
                                          </MediaField>
                                        </div>
                                      </li>
                                    </ul>
                                  </div>
                                </Component>
                              </ComponentWrapper>
                            </Control>
                          </Connect(Control)>
                        </Modeled(Connect(Control))>
                      </FormGroup>
                    </Connect(FormGroup)>
                  </div>
                </MetadataFormFields>
              </Connect(MetadataFormFields)>
              <Connect(FormGroup)
                key="captcha"
                model=".captcha"
              >
                <FormGroup
                  className=""
                  dispatch={[Function]}
                  hasError={false}
                  model=".captcha"
                >
                  <Modeled(Connect(Control))
                    component={[Function]}
                    mapProps={
                      Object {
                        "className": [Function],
                      }
                    }
                    model=".captcha"
                  >
                    <Connect(Control)
                      component={[Function]}
                      mapProps={
                        Object {
                          "className": [Function],
                        }
                      }
                      model="publicform.captcha"
                      store={
                        Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(observable): [Function],
                        }
                      }
                    >
                      <Control
                        asyncValidateOn="blur"
                        changeAction={[Function]}
                        component={[Function]}
                        controlProps={
                          Object {
                            "children": <ul
                              className="search__filter"
                            >
                              <li>
                                <label>
                                  <Connect(Translate)>
                                    Captcha
                                  </Connect(Translate)>
                                  <span
                                    className="required"
                                  >
                                    *
                                  </span>
                                </label>
                              </li>
                              <li
                                className="wide"
                              >
                                <Captcha
                                  model=".captcha"
                                  refresh={[Function]}
                                  remote={true}
                                />
                              </li>
                            </ul>,
                          }
                        }
                        dispatch={[Function]}
                        dynamic={false}
                        fieldValue={
                          Object {
                            "errors": Object {
                              "required": true,
                            },
                            "focus": false,
                            "initialValue": null,
                            "intents": Array [],
                            "model": "publicform.captcha",
                            "pending": false,
                            "pristine": true,
                            "retouched": false,
                            "submitFailed": false,
                            "submitted": false,
                            "touched": false,
                            "valid": false,
                            "validated": true,
                            "validating": false,
                            "validity": Object {
                              "required": false,
                            },
                            "value": null,
                          }
                        }
                        getValue={[Function]}
                        ignore={Array []}
                        isToggle={false}
                        mapProps={
                          Object {
                            "className": [Function],
                          }
                        }
                        model="publicform.captcha"
                        parser={[Function]}
                        persist={false}
                        store={
                          Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          }
                        }
                        storeSubscription={
                          Subscription {
                            "listeners": Object {
                              "clear": [Function],
                              "get": [Function],
                              "notify": [Function],
                              "subscribe": [Function],
                            },
                            "onStateChange": [Function],
                            "parentSub": undefined,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                            "unsubscribe": [Function],
                          }
                        }
                        updateOn="change"
                        updateOnEnter={true}
                        withField={true}
                      >
                        <ComponentWrapper
                          className=""
                          component={[Function]}
                        >
                          <Component
                            className=""
                          >
                            <div
                              className="form-group  "
                            >
                              <ul
                                className="search__filter"
                              >
                                <li>
                                  <label>
                                    <Connect(Translate)>
                                      <Translate
                                        context="System"
                                        edit={[Function]}
                                        i18nmode={true}
                                        translationKey="Captcha"
                                      >
                                        <span
                                          className="translation active"
                                          onClick={[Function]}
                                        >
                                          Captcha
                                        </span>
                                      </Translate>
                                    </Connect(Translate)>
                                    <span
                                      className="required"
                                    >
                                      *
                                    </span>
                                  </label>
                                </li>
                                <li
                                  className="wide"
                                >
                                  <Captcha
                                    model=".captcha"
                                    refresh={
                                      [MockFunction] {
                                        "calls": Array [
                                          Array [
                                            [MockFunction] {
                                              "calls": [Circular],
                                              "results": Array [
                                                Object {
                                                  "type": "return",
                                                  "value": undefined,
                                                },
                                              ],
                                            },
                                          ],
                                        ],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      }
                                    }
                                    remote={true}
                                  >
                                    <DefaultConnectedControl
                                      component={[Function]}
                                      model=".captcha"
                                      refresh={[Function]}
                                      remote={true}
                                    >
                                      <Modeled(Connect(Control))
                                        component={[Function]}
                                        mapProps={
                                          Object {
                                            "disabled": [Function],
                                            "name": [Function],
                                            "onBlur": [Function],
                                            "onChange": [Function],
                                            "onFocus": [Function],
                                            "onKeyPress": [Function],
                                            "value": [Function],
                                          }
                                        }
                                        model=".captcha"
                                        refresh={[Function]}
                                        remote={true}
                                      >
                                        <Connect(Control)
                                          component={[Function]}
                                          mapProps={
                                            Object {
                                              "disabled": [Function],
                                              "name": [Function],
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "onFocus": [Function],
                                              "onKeyPress": [Function],
                                              "value": [Function],
                                            }
                                          }
                                          model="publicform.captcha"
                                          refresh={[Function]}
                                          remote={true}
                                          store={
                                            Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            }
                                          }
                                        >
                                          <Control
                                            asyncValidateOn="blur"
                                            changeAction={[Function]}
                                            component={[Function]}
                                            controlProps={
                                              Object {
                                                "refresh": [Function],
                                                "remote": true,
                                              }
                                            }
                                            dispatch={[Function]}
                                            dynamic={false}
                                            fieldValue={
                                              Object {
                                                "errors": Object {
                                                  "required": true,
                                                },
                                                "focus": false,
                                                "initialValue": null,
                                                "intents": Array [],
                                                "model": "publicform.captcha",
                                                "pending": false,
                                                "pristine": true,
                                                "retouched": false,
                                                "submitFailed": false,
                                                "submitted": false,
                                                "touched": false,
                                                "valid": false,
                                                "validated": true,
                                                "validating": false,
                                                "validity": Object {
                                                  "required": false,
                                                },
                                                "value": null,
                                              }
                                            }
                                            getValue={[Function]}
                                            ignore={Array []}
                                            isToggle={false}
                                            mapProps={
                                              Object {
                                                "disabled": [Function],
                                                "name": [Function],
                                                "onBlur": [Function],
                                                "onChange": [Function],
                                                "onFocus": [Function],
                                                "onKeyPress": [Function],
                                                "value": [Function],
                                              }
                                            }
                                            model="publicform.captcha"
                                            parser={[Function]}
                                            persist={false}
                                            refresh={[Function]}
                                            remote={true}
                                            store={
                                              Object {
                                                "dispatch": [Function],
                                                "getState": [Function],
                                                "replaceReducer": [Function],
                                                "subscribe": [Function],
                                                Symbol(observable): [Function],
                                              }
                                            }
                                            storeSubscription={
                                              Subscription {
                                                "listeners": Object {
                                                  "clear": [Function],
                                                  "get": [Function],
                                                  "notify": [Function],
                                                  "subscribe": [Function],
                                                },
                                                "onStateChange": [Function],
                                                "parentSub": undefined,
                                                "store": Object {
                                                  "dispatch": [Function],
                                                  "getState": [Function],
                                                  "replaceReducer": [Function],
                                                  "subscribe": [Function],
                                                  Symbol(observable): [Function],
                                                },
                                                "unsubscribe": [Function],
                                              }
                                            }
                                            updateOn="change"
                                            updateOnEnter={true}
                                            withField={true}
                                          >
                                            <ComponentWrapper
                                              component={[Function]}
                                              disabled={false}
                                              name="publicform.captcha"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyPress={[Function]}
                                              refresh={[Function]}
                                              remote={true}
                                            >
                                              <Captcha
                                                disabled={false}
                                                name="publicform.captcha"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyPress={[Function]}
                                                refresh={[Function]}
                                                remote={true}
                                                value={
                                                  Object {
                                                    "id": "",
                                                    "text": "",
                                                  }
                                                }
                                              >
                                                <div
                                                  className="captcha"
                                                >
                                                  <div
                                                    dangerouslySetInnerHTML={
                                                      Object {
                                                        "__html": "",
                                                      }
                                                    }
                                                  />
                                                  <input
                                                    className="form-control"
                                                    onChange={[Function]}
                                                    value=""
                                                  />
                                                </div>
                                              </Captcha>
                                            </ComponentWrapper>
                                          </Control>
                                        </Connect(Control)>
                                      </Modeled(Connect(Control))>
                                    </DefaultConnectedControl>
                                  </Captcha>
                                </li>
                              </ul>
                            </div>
                          </Component>
                        </ComponentWrapper>
                      </Control>
                    </Connect(Control)>
                  </Modeled(Connect(Control))>
                </FormGroup>
              </Connect(FormGroup)>
              <button
                className="btn btn-success"
                type="submit"
              >
                <Connect(Translate)>
                  <Translate
                    context="System"
                    edit={[Function]}
                    i18nmode={true}
                    translationKey="Submit"
                  >
                    <span
                      className="translation active"
                      onClick={[Function]}
                    >
                      Submit
                    </span>
                  </Translate>
                </Connect(Translate)>
              </button>
            </div>
          </form>
        </Form>
      </Connect(Form)>
    </LocalForm>
  </PublicForm>
</Provider>
`;

exports[`PublicForm should render a form 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <PublicForm
    attachments={false}
    file={false}
    remote={false}
    submit={[Function]}
    template={
      Immutable.Map {
        "_id": "123",
        "commonProperties": Immutable.List [
          Immutable.Map {
            "label": "Title changed",
            "name": "title",
            "generatedId": false,
          },
        ],
        "properties": Immutable.List [
          Immutable.Map {
            "type": "text",
            "name": "text",
          },
          Immutable.Map {
            "type": "image",
            "name": "image",
          },
        ],
      }
    }
    thesauris={Immutable.List []}
  >
    <LocalForm
      getDispatch={[Function]}
      initialState={Object {}}
      model="publicform"
      onSubmit={[Function]}
      validators={
        Object {
          "captcha": Object {
            "required": [Function],
          },
          "title": Object {
            "required": [Function],
          },
        }
      }
    >
      <Connect(Form)
        getDispatch={[Function]}
        model="publicform"
        onSubmit={[Function]}
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
        validators={
          Object {
            "captcha": Object {
              "required": [Function],
            },
            "title": Object {
              "required": [Function],
            },
          }
        }
      >
        <Form
          component="form"
          dispatch={[Function]}
          formValue={
            Object {
              "$form": Object {
                "errors": false,
                "focus": false,
                "initialValue": Object {
                  "captcha": null,
                  "title": null,
                },
                "intents": Array [],
                "model": "publicform",
                "pending": false,
                "pristine": true,
                "retouched": false,
                "submitFailed": false,
                "submitted": false,
                "touched": false,
                "valid": false,
                "validated": true,
                "validating": false,
                "validity": true,
                "value": Object {
                  "captcha": null,
                  "title": null,
                },
              },
              "captcha": Object {
                "errors": Object {
                  "required": true,
                },
                "focus": false,
                "initialValue": null,
                "intents": Array [],
                "model": "publicform.captcha",
                "pending": false,
                "pristine": true,
                "retouched": false,
                "submitFailed": false,
                "submitted": false,
                "touched": false,
                "valid": false,
                "validated": true,
                "validating": false,
                "validity": Object {
                  "required": false,
                },
                "value": null,
              },
              "title": Object {
                "errors": Object {
                  "required": true,
                },
                "focus": false,
                "initialValue": null,
                "intents": Array [],
                "model": "publicform.title",
                "pending": false,
                "pristine": true,
                "retouched": false,
                "submitFailed": false,
                "submitted": false,
                "touched": false,
                "valid": false,
                "validated": true,
                "validating": false,
                "validity": Object {
                  "required": false,
                },
                "value": null,
              },
            }
          }
          getDispatch={[Function]}
          model="publicform"
          modelValue={Object {}}
          onSubmit={[Function]}
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            }
          }
          storeSubscription={
            Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": undefined,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(observable): [Function],
              },
              "unsubscribe": [Function],
            }
          }
          validateOn="change"
          validators={
            Object {
              "captcha": Object {
                "required": [Function],
              },
              "title": Object {
                "required": [Function],
              },
            }
          }
        >
          <form
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <div
              className="public-form"
            >
              <Connect(FormGroup)
                key="title"
                model=".title"
              >
                <FormGroup
                  className=""
                  dispatch={[Function]}
                  hasError={false}
                  model=".title"
                >
                  <Modeled(Connect(Control))
                    component={[Function]}
                    mapProps={
                      Object {
                        "className": [Function],
                      }
                    }
                    model=".title"
                  >
                    <Connect(Control)
                      component={[Function]}
                      mapProps={
                        Object {
                          "className": [Function],
                        }
                      }
                      model="publicform.title"
                      store={
                        Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(observable): [Function],
                        }
                      }
                    >
                      <Control
                        asyncValidateOn="blur"
                        changeAction={[Function]}
                        component={[Function]}
                        controlProps={
                          Object {
                            "children": <ul
                              className="search__filter"
                            >
                              <li>
                                <label
                                  htmlFor="title"
                                >
                                  <Connect(Translate)
                                    context="123"
                                  >
                                    Title changed
                                  </Connect(Translate)>
                                  <span
                                    className="required"
                                  >
                                    *
                                  </span>
                                </label>
                              </li>
                              <li
                                className="wide"
                              >
                                <DefaultConnectedControlText
                                  className="form-control"
                                  id="title"
                                  model=".title"
                                />
                              </li>
                            </ul>,
                          }
                        }
                        dispatch={[Function]}
                        dynamic={false}
                        fieldValue={
                          Object {
                            "errors": Object {
                              "required": true,
                            },
                            "focus": false,
                            "initialValue": null,
                            "intents": Array [],
                            "model": "publicform.title",
                            "pending": false,
                            "pristine": true,
                            "retouched": false,
                            "submitFailed": false,
                            "submitted": false,
                            "touched": false,
                            "valid": false,
                            "validated": true,
                            "validating": false,
                            "validity": Object {
                              "required": false,
                            },
                            "value": null,
                          }
                        }
                        getValue={[Function]}
                        ignore={Array []}
                        isToggle={false}
                        mapProps={
                          Object {
                            "className": [Function],
                          }
                        }
                        model="publicform.title"
                        parser={[Function]}
                        persist={false}
                        store={
                          Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          }
                        }
                        storeSubscription={
                          Subscription {
                            "listeners": Object {
                              "clear": [Function],
                              "get": [Function],
                              "notify": [Function],
                              "subscribe": [Function],
                            },
                            "onStateChange": [Function],
                            "parentSub": undefined,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                            "unsubscribe": [Function],
                          }
                        }
                        updateOn="change"
                        updateOnEnter={true}
                        withField={true}
                      >
                        <ComponentWrapper
                          className=""
                          component={[Function]}
                        >
                          <Component
                            className=""
                          >
                            <div
                              className="form-group  "
                            >
                              <ul
                                className="search__filter"
                              >
                                <li>
                                  <label
                                    htmlFor="title"
                                  >
                                    <Connect(Translate)
                                      context="123"
                                    >
                                      <Translate
                                        context="123"
                                        edit={[Function]}
                                        i18nmode={false}
                                        translationKey="Title changed"
                                      >
                                        <span
                                          className="translation"
                                          onClick={[Function]}
                                        >
                                          Title changed
                                        </span>
                                      </Translate>
                                    </Connect(Translate)>
                                    <span
                                      className="required"
                                    >
                                      *
                                    </span>
                                  </label>
                                </li>
                                <li
                                  className="wide"
                                >
                                  <DefaultConnectedControlText
                                    className="form-control"
                                    id="title"
                                    model=".title"
                                  >
                                    <Modeled(Connect(Control))
                                      className="form-control"
                                      component="input"
                                      id="title"
                                      mapProps={
                                        Object {
                                          "disabled": [Function],
                                          "name": [Function],
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onFocus": [Function],
                                          "onKeyPress": [Function],
                                          "type": "text",
                                          "value": [Function],
                                        }
                                      }
                                      model=".title"
                                    >
                                      <Connect(Control)
                                        className="form-control"
                                        component="input"
                                        id="title"
                                        mapProps={
                                          Object {
                                            "disabled": [Function],
                                            "name": [Function],
                                            "onBlur": [Function],
                                            "onChange": [Function],
                                            "onFocus": [Function],
                                            "onKeyPress": [Function],
                                            "type": "text",
                                            "value": [Function],
                                          }
                                        }
                                        model="publicform.title"
                                        store={
                                          Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          }
                                        }
                                      >
                                        <Control
                                          asyncValidateOn="blur"
                                          changeAction={[Function]}
                                          className="form-control"
                                          component="input"
                                          controlProps={
                                            Object {
                                              "className": "form-control",
                                              "id": "title",
                                            }
                                          }
                                          dispatch={[Function]}
                                          dynamic={false}
                                          fieldValue={
                                            Object {
                                              "errors": Object {
                                                "required": true,
                                              },
                                              "focus": false,
                                              "initialValue": null,
                                              "intents": Array [],
                                              "model": "publicform.title",
                                              "pending": false,
                                              "pristine": true,
                                              "retouched": false,
                                              "submitFailed": false,
                                              "submitted": false,
                                              "touched": false,
                                              "valid": false,
                                              "validated": true,
                                              "validating": false,
                                              "validity": Object {
                                                "required": false,
                                              },
                                              "value": null,
                                            }
                                          }
                                          getValue={[Function]}
                                          id="title"
                                          ignore={Array []}
                                          isToggle={false}
                                          mapProps={
                                            Object {
                                              "disabled": [Function],
                                              "name": [Function],
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "onFocus": [Function],
                                              "onKeyPress": [Function],
                                              "type": "text",
                                              "value": [Function],
                                            }
                                          }
                                          model="publicform.title"
                                          parser={[Function]}
                                          persist={false}
                                          store={
                                            Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            }
                                          }
                                          storeSubscription={
                                            Subscription {
                                              "listeners": Object {
                                                "clear": [Function],
                                                "get": [Function],
                                                "notify": [Function],
                                                "subscribe": [Function],
                                              },
                                              "onStateChange": [Function],
                                              "parentSub": undefined,
                                              "store": Object {
                                                "dispatch": [Function],
                                                "getState": [Function],
                                                "replaceReducer": [Function],
                                                "subscribe": [Function],
                                                Symbol(observable): [Function],
                                              },
                                              "unsubscribe": [Function],
                                            }
                                          }
                                          updateOn="change"
                                          updateOnEnter={true}
                                          withField={true}
                                        >
                                          <ComponentWrapper
                                            className="form-control"
                                            component="input"
                                            disabled={false}
                                            id="title"
                                            name="publicform.title"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyPress={[Function]}
                                            type="text"
                                            value=""
                                          >
                                            <input
                                              className="form-control"
                                              disabled={false}
                                              id="title"
                                              name="publicform.title"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyPress={[Function]}
                                              type="text"
                                              value=""
                                            />
                                          </ComponentWrapper>
                                        </Control>
                                      </Connect(Control)>
                                    </Modeled(Connect(Control))>
                                  </DefaultConnectedControlText>
                                </li>
                              </ul>
                            </div>
                          </Component>
                        </ComponentWrapper>
                      </Control>
                    </Connect(Control)>
                  </Modeled(Connect(Control))>
                </FormGroup>
              </Connect(FormGroup)>
              <Connect(MetadataFormFields)
                boundChange={[Function]}
                model="publicform"
                template={
                  Immutable.Map {
                    "_id": "123",
                    "commonProperties": Immutable.List [
                      Immutable.Map {
                        "label": "Title changed",
                        "name": "title",
                        "generatedId": false,
                      },
                    ],
                    "properties": Immutable.List [
                      Immutable.Map {
                        "type": "text",
                        "name": "text",
                      },
                      Immutable.Map {
                        "type": "image",
                        "name": "image",
                      },
                    ],
                  }
                }
                thesauris={Immutable.List []}
              >
                <MetadataFormFields
                  attachments={Immutable.List []}
                  boundChange={[Function]}
                  change={[Function]}
                  dateFormat="dateFormat"
                  entityThesauris={Immutable.Map {}}
                  highlightedProps={Array []}
                  localAttachments={Array []}
                  locale="en"
                  model="publicform"
                  multipleEdition={false}
                  storeKey=""
                  template={
                    Immutable.Map {
                      "_id": "123",
                      "commonProperties": Immutable.List [
                        Immutable.Map {
                          "label": "Title changed",
                          "name": "title",
                          "generatedId": false,
                        },
                      ],
                      "properties": Immutable.List [
                        Immutable.Map {
                          "type": "text",
                          "name": "text",
                        },
                        Immutable.Map {
                          "type": "image",
                          "name": "image",
                        },
                      ],
                    }
                  }
                  thesauris={Immutable.List []}
                >
                  <div>
                    <Connect(FormGroup)
                      className="text"
                      key="text"
                      model=".metadata.text"
                    >
                      <FormGroup
                        className="text"
                        dispatch={[Function]}
                        hasError={false}
                        model=".metadata.text"
                      >
                        <Modeled(Connect(Control))
                          component={[Function]}
                          mapProps={
                            Object {
                              "className": [Function],
                            }
                          }
                          model=".metadata.text"
                        >
                          <Connect(Control)
                            component={[Function]}
                            mapProps={
                              Object {
                                "className": [Function],
                              }
                            }
                            model="publicform.metadata.text"
                            store={
                              Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              }
                            }
                          >
                            <Control
                              asyncValidateOn="blur"
                              changeAction={[Function]}
                              component={[Function]}
                              controlProps={
                                Object {
                                  "children": <ul
                                    className="search__filter is-active "
                                  >
                                    <li
                                      className="title"
                                    >
                                      <label>
                                        <Connect(MultipleEditionFieldWarningBase)
                                          field="metadata.text"
                                          model="publicform"
                                          multipleEdition={false}
                                        />
                                        <Connect(Translate)
                                          context="123"
                                        />
                                        
                                      </label>
                                    </li>
                                    <li
                                      className="wide"
                                    >
                                      <div
                                        className="metadata-extractor-container"
                                      >
                                        <Modeled(Connect(Field))
                                          model=".metadata.text"
                                        >
                                          <input
                                            className="form-control"
                                            type="text"
                                          />
                                        </Modeled(Connect(Field))>
                                      </div>
                                    </li>
                                  </ul>,
                                }
                              }
                              dispatch={[Function]}
                              dynamic={false}
                              fieldValue={
                                Object {
                                  "errors": Object {},
                                  "focus": false,
                                  "intents": Array [],
                                  "pending": false,
                                  "pristine": true,
                                  "retouched": false,
                                  "submitFailed": false,
                                  "submitted": false,
                                  "touched": false,
                                  "valid": true,
                                  "validated": false,
                                  "validating": false,
                                  "validity": Object {},
                                }
                              }
                              getValue={[Function]}
                              ignore={Array []}
                              isToggle={false}
                              mapProps={
                                Object {
                                  "className": [Function],
                                }
                              }
                              model="publicform.metadata.text"
                              parser={[Function]}
                              persist={false}
                              store={
                                Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                }
                              }
                              storeSubscription={
                                Subscription {
                                  "listeners": Object {
                                    "clear": [Function],
                                    "get": [Function],
                                    "notify": [Function],
                                    "subscribe": [Function],
                                  },
                                  "onStateChange": [Function],
                                  "parentSub": undefined,
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                  "unsubscribe": [Function],
                                }
                              }
                              updateOn="change"
                              updateOnEnter={true}
                              withField={true}
                            >
                              <ComponentWrapper
                                className=""
                                component={[Function]}
                              >
                                <Component
                                  className=""
                                >
                                  <div
                                    className="form-group text "
                                  >
                                    <ul
                                      className="search__filter is-active "
                                    >
                                      <li
                                        className="title"
                                      >
                                        <label>
                                          <Connect(MultipleEditionFieldWarningBase)
                                            field="metadata.text"
                                            model="publicform"
                                            multipleEdition={false}
                                          >
                                            <MultipleEditionFieldWarningBase
                                              dispatch={[Function]}
                                              field="metadata.text"
                                              model="publicform"
                                              multipleEdition={false}
                                              touched={false}
                                            />
                                          </Connect(MultipleEditionFieldWarningBase)>
                                          <Connect(Translate)
                                            context="123"
                                          >
                                            <Translate
                                              context="123"
                                              edit={[Function]}
                                              i18nmode={false}
                                              translationKey=""
                                            >
                                              <span
                                                className="translation"
                                                onClick={[Function]}
                                              />
                                            </Translate>
                                          </Connect(Translate)>
                                        </label>
                                      </li>
                                      <li
                                        className="wide"
                                      >
                                        <div
                                          className="metadata-extractor-container"
                                        >
                                          <Modeled(Connect(Field))
                                            model=".metadata.text"
                                          >
                                            <Connect(Field)
                                              model="publicform.metadata.text"
                                              store={
                                                Object {
                                                  "dispatch": [Function],
                                                  "getState": [Function],
                                                  "replaceReducer": [Function],
                                                  "subscribe": [Function],
                                                  Symbol(observable): [Function],
                                                }
                                              }
                                            >
                                              <Field
                                                asyncValidateOn="blur"
                                                changeAction={[Function]}
                                                component="div"
                                                dispatch={[Function]}
                                                dynamic={true}
                                                fieldValue={
                                                  Object {
                                                    "errors": Object {},
                                                    "focus": false,
                                                    "intents": Array [],
                                                    "pending": false,
                                                    "pristine": true,
                                                    "retouched": false,
                                                    "submitFailed": false,
                                                    "submitted": false,
                                                    "touched": false,
                                                    "valid": true,
                                                    "validated": false,
                                                    "validating": false,
                                                    "validity": Object {},
                                                  }
                                                }
                                                formatter={[Function]}
                                                model="publicform.metadata.text"
                                                parser={[Function]}
                                                store={
                                                  Object {
                                                    "dispatch": [Function],
                                                    "getState": [Function],
                                                    "replaceReducer": [Function],
                                                    "subscribe": [Function],
                                                    Symbol(observable): [Function],
                                                  }
                                                }
                                                storeSubscription={
                                                  Subscription {
                                                    "listeners": Object {
                                                      "clear": [Function],
                                                      "get": [Function],
                                                      "notify": [Function],
                                                      "subscribe": [Function],
                                                    },
                                                    "onStateChange": [Function],
                                                    "parentSub": undefined,
                                                    "store": Object {
                                                      "dispatch": [Function],
                                                      "getState": [Function],
                                                      "replaceReducer": [Function],
                                                      "subscribe": [Function],
                                                      Symbol(observable): [Function],
                                                    },
                                                    "unsubscribe": [Function],
                                                  }
                                                }
                                                updateOn="change"
                                              >
                                                <div>
                                                  <DefaultConnectedControl
                                                    asyncValidateOn="blur"
                                                    changeAction={[Function]}
                                                    component="input"
                                                    control={
                                                      <input
                                                        className="form-control"
                                                        type="text"
                                                      />
                                                    }
                                                    controlProps={
                                                      Object {
                                                        "className": "form-control",
                                                        "type": "text",
                                                      }
                                                    }
                                                    dispatch={[Function]}
                                                    dynamic={true}
                                                    fieldValue={
                                                      Object {
                                                        "errors": Object {},
                                                        "focus": false,
                                                        "intents": Array [],
                                                        "pending": false,
                                                        "pristine": true,
                                                        "retouched": false,
                                                        "submitFailed": false,
                                                        "submitted": false,
                                                        "touched": false,
                                                        "valid": true,
                                                        "validated": false,
                                                        "validating": false,
                                                        "validity": Object {},
                                                      }
                                                    }
                                                    formatter={[Function]}
                                                    mapProps={
                                                      Object {
                                                        "disabled": [Function],
                                                        "name": [Function],
                                                        "onBlur": [Function],
                                                        "onChange": [Function],
                                                        "onFocus": [Function],
                                                        "onKeyPress": [Function],
                                                        "value": [Function],
                                                      }
                                                    }
                                                    model="publicform.metadata.text"
                                                    parser={[Function]}
                                                    store={
                                                      Object {
                                                        "dispatch": [Function],
                                                        "getState": [Function],
                                                        "replaceReducer": [Function],
                                                        "subscribe": [Function],
                                                        Symbol(observable): [Function],
                                                      }
                                                    }
                                                    storeSubscription={
                                                      Subscription {
                                                        "listeners": Object {
                                                          "clear": [Function],
                                                          "get": [Function],
                                                          "notify": [Function],
                                                          "subscribe": [Function],
                                                        },
                                                        "onStateChange": [Function],
                                                        "parentSub": undefined,
                                                        "store": Object {
                                                          "dispatch": [Function],
                                                          "getState": [Function],
                                                          "replaceReducer": [Function],
                                                          "subscribe": [Function],
                                                          Symbol(observable): [Function],
                                                        },
                                                        "unsubscribe": [Function],
                                                      }
                                                    }
                                                    updateOn="change"
                                                  >
                                                    <Modeled(Connect(Control))
                                                      asyncValidateOn="blur"
                                                      changeAction={[Function]}
                                                      component="input"
                                                      control={
                                                        <input
                                                          className="form-control"
                                                          type="text"
                                                        />
                                                      }
                                                      controlProps={
                                                        Object {
                                                          "className": "form-control",
                                                          "type": "text",
                                                        }
                                                      }
                                                      dispatch={[Function]}
                                                      dynamic={true}
                                                      fieldValue={
                                                        Object {
                                                          "errors": Object {},
                                                          "focus": false,
                                                          "intents": Array [],
                                                          "pending": false,
                                                          "pristine": true,
                                                          "retouched": false,
                                                          "submitFailed": false,
                                                          "submitted": false,
                                                          "touched": false,
                                                          "valid": true,
                                                          "validated": false,
                                                          "validating": false,
                                                          "validity": Object {},
                                                        }
                                                      }
                                                      formatter={[Function]}
                                                      mapProps={
                                                        Object {
                                                          "disabled": [Function],
                                                          "name": [Function],
                                                          "onBlur": [Function],
                                                          "onChange": [Function],
                                                          "onFocus": [Function],
                                                          "onKeyPress": [Function],
                                                          "value": [Function],
                                                        }
                                                      }
                                                      model="publicform.metadata.text"
                                                      parser={[Function]}
                                                      store={
                                                        Object {
                                                          "dispatch": [Function],
                                                          "getState": [Function],
                                                          "replaceReducer": [Function],
                                                          "subscribe": [Function],
                                                          Symbol(observable): [Function],
                                                        }
                                                      }
                                                      storeSubscription={
                                                        Subscription {
                                                          "listeners": Object {
                                                            "clear": [Function],
                                                            "get": [Function],
                                                            "notify": [Function],
                                                            "subscribe": [Function],
                                                          },
                                                          "onStateChange": [Function],
                                                          "parentSub": undefined,
                                                          "store": Object {
                                                            "dispatch": [Function],
                                                            "getState": [Function],
                                                            "replaceReducer": [Function],
                                                            "subscribe": [Function],
                                                            Symbol(observable): [Function],
                                                          },
                                                          "unsubscribe": [Function],
                                                        }
                                                      }
                                                      updateOn="change"
                                                    >
                                                      <Connect(Control)
                                                        asyncValidateOn="blur"
                                                        changeAction={[Function]}
                                                        component="input"
                                                        control={
                                                          <input
                                                            className="form-control"
                                                            type="text"
                                                          />
                                                        }
                                                        controlProps={
                                                          Object {
                                                            "className": "form-control",
                                                            "type": "text",
                                                          }
                                                        }
                                                        dispatch={[Function]}
                                                        dynamic={true}
                                                        fieldValue={
                                                          Object {
                                                            "errors": Object {},
                                                            "focus": false,
                                                            "intents": Array [],
                                                            "pending": false,
                                                            "pristine": true,
                                                            "retouched": false,
                                                            "submitFailed": false,
                                                            "submitted": false,
                                                            "touched": false,
                                                            "valid": true,
                                                            "validated": false,
                                                            "validating": false,
                                                            "validity": Object {},
                                                          }
                                                        }
                                                        formatter={[Function]}
                                                        mapProps={
                                                          Object {
                                                            "disabled": [Function],
                                                            "name": [Function],
                                                            "onBlur": [Function],
                                                            "onChange": [Function],
                                                            "onFocus": [Function],
                                                            "onKeyPress": [Function],
                                                            "value": [Function],
                                                          }
                                                        }
                                                        model="publicform.metadata.text"
                                                        parser={[Function]}
                                                        store={
                                                          Object {
                                                            "dispatch": [Function],
                                                            "getState": [Function],
                                                            "replaceReducer": [Function],
                                                            "subscribe": [Function],
                                                            Symbol(observable): [Function],
                                                          }
                                                        }
                                                        storeSubscription={
                                                          Subscription {
                                                            "listeners": Object {
                                                              "clear": [Function],
                                                              "get": [Function],
                                                              "notify": [Function],
                                                              "subscribe": [Function],
                                                            },
                                                            "onStateChange": [Function],
                                                            "parentSub": undefined,
                                                            "store": Object {
                                                              "dispatch": [Function],
                                                              "getState": [Function],
                                                              "replaceReducer": [Function],
                                                              "subscribe": [Function],
                                                              Symbol(observable): [Function],
                                                            },
                                                            "unsubscribe": [Function],
                                                          }
                                                        }
                                                        updateOn="change"
                                                      >
                                                        <Control
                                                          asyncValidateOn="blur"
                                                          changeAction={[Function]}
                                                          component="input"
                                                          control={
                                                            <input
                                                              className="form-control"
                                                              type="text"
                                                            />
                                                          }
                                                          controlProps={
                                                            Object {
                                                              "className": "form-control",
                                                              "componentMap": undefined,
                                                              "storeSubscription": Subscription {
                                                                "listeners": Object {
                                                                  "clear": [Function],
                                                                  "get": [Function],
                                                                  "notify": [Function],
                                                                  "subscribe": [Function],
                                                                },
                                                                "onStateChange": [Function],
                                                                "parentSub": undefined,
                                                                "store": Object {
                                                                  "dispatch": [Function],
                                                                  "getState": [Function],
                                                                  "replaceReducer": [Function],
                                                                  "subscribe": [Function],
                                                                  Symbol(observable): [Function],
                                                                },
                                                                "unsubscribe": [Function],
                                                              },
                                                              "type": "text",
                                                            }
                                                          }
                                                          dispatch={[Function]}
                                                          dynamic={true}
                                                          fieldValue={
                                                            Object {
                                                              "errors": Object {},
                                                              "focus": false,
                                                              "intents": Array [],
                                                              "pending": false,
                                                              "pristine": true,
                                                              "retouched": false,
                                                              "submitFailed": false,
                                                              "submitted": false,
                                                              "touched": false,
                                                              "valid": true,
                                                              "validated": false,
                                                              "validating": false,
                                                              "validity": Object {},
                                                            }
                                                          }
                                                          formatter={[Function]}
                                                          getValue={[Function]}
                                                          ignore={Array []}
                                                          isToggle={false}
                                                          mapProps={
                                                            Object {
                                                              "disabled": [Function],
                                                              "name": [Function],
                                                              "onBlur": [Function],
                                                              "onChange": [Function],
                                                              "onFocus": [Function],
                                                              "onKeyPress": [Function],
                                                              "value": [Function],
                                                            }
                                                          }
                                                          model="publicform.metadata.text"
                                                          parser={[Function]}
                                                          persist={false}
                                                          store={
                                                            Object {
                                                              "dispatch": [Function],
                                                              "getState": [Function],
                                                              "replaceReducer": [Function],
                                                              "subscribe": [Function],
                                                              Symbol(observable): [Function],
                                                            }
                                                          }
                                                          storeSubscription={
                                                            Subscription {
                                                              "listeners": Object {
                                                                "clear": [Function],
                                                                "get": [Function],
                                                                "notify": [Function],
                                                                "subscribe": [Function],
                                                              },
                                                              "onStateChange": [Function],
                                                              "parentSub": Subscription {
                                                                "listeners": Object {
                                                                  "clear": [Function],
                                                                  "get": [Function],
                                                                  "notify": [Function],
                                                                  "subscribe": [Function],
                                                                },
                                                                "onStateChange": [Function],
                                                                "parentSub": undefined,
                                                                "store": Object {
                                                                  "dispatch": [Function],
                                                                  "getState": [Function],
                                                                  "replaceReducer": [Function],
                                                                  "subscribe": [Function],
                                                                  Symbol(observable): [Function],
                                                                },
                                                                "unsubscribe": [Function],
                                                              },
                                                              "store": Object {
                                                                "dispatch": [Function],
                                                                "getState": [Function],
                                                                "replaceReducer": [Function],
                                                                "subscribe": [Function],
                                                                Symbol(observable): [Function],
                                                              },
                                                              "unsubscribe": [Function],
                                                            }
                                                          }
                                                          updateOn="change"
                                                          updateOnEnter={true}
                                                          withField={true}
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            name="publicform.metadata.text"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            onKeyPress={[Function]}
                                                            type="text"
                                                            value=""
                                                          />
                                                        </Control>
                                                      </Connect(Control)>
                                                    </Modeled(Connect(Control))>
                                                  </DefaultConnectedControl>
                                                </div>
                                              </Field>
                                            </Connect(Field)>
                                          </Modeled(Connect(Field))>
                                        </div>
                                      </li>
                                    </ul>
                                  </div>
                                </Component>
                              </ComponentWrapper>
                            </Control>
                          </Connect(Control)>
                        </Modeled(Connect(Control))>
                      </FormGroup>
                    </Connect(FormGroup)>
                    <Connect(FormGroup)
                      className="image"
                      key="image"
                      model=".metadata.image"
                    >
                      <FormGroup
                        className="image"
                        dispatch={[Function]}
                        hasError={false}
                        model=".metadata.image"
                      >
                        <Modeled(Connect(Control))
                          component={[Function]}
                          mapProps={
                            Object {
                              "className": [Function],
                            }
                          }
                          model=".metadata.image"
                        >
                          <Connect(Control)
                            component={[Function]}
                            mapProps={
                              Object {
                                "className": [Function],
                              }
                            }
                            model="publicform.metadata.image"
                            store={
                              Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              }
                            }
                          >
                            <Control
                              asyncValidateOn="blur"
                              changeAction={[Function]}
                              component={[Function]}
                              controlProps={
                                Object {
                                  "children": <ul
                                    className="search__filter is-active "
                                  >
                                    <li
                                      className="title"
                                    >
                                      <label>
                                        <Connect(MultipleEditionFieldWarningBase)
                                          field="metadata.image"
                                          model="publicform"
                                          multipleEdition={false}
                                        />
                                        <Connect(Translate)
                                          context="123"
                                        />
                                        
                                      </label>
                                    </li>
                                    <li
                                      className="wide"
                                    >
                                      <div
                                        className="metadata-extractor-container"
                                      >
                                        <MediaField
                                          attachments={Array []}
                                          formModel="publicform"
                                          localAttachments={Array []}
                                          model=".metadata.image"
                                          multipleEdition={false}
                                          type={0}
                                        />
                                      </div>
                                    </li>
                                  </ul>,
                                }
                              }
                              dispatch={[Function]}
                              dynamic={false}
                              fieldValue={
                                Object {
                                  "errors": Object {},
                                  "focus": false,
                                  "intents": Array [],
                                  "pending": false,
                                  "pristine": true,
                                  "retouched": false,
                                  "submitFailed": false,
                                  "submitted": false,
                                  "touched": false,
                                  "valid": true,
                                  "validated": false,
                                  "validating": false,
                                  "validity": Object {},
                                }
                              }
                              getValue={[Function]}
                              ignore={Array []}
                              isToggle={false}
                              mapProps={
                                Object {
                                  "className": [Function],
                                }
                              }
                              model="publicform.metadata.image"
                              parser={[Function]}
                              persist={false}
                              store={
                                Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                }
                              }
                              storeSubscription={
                                Subscription {
                                  "listeners": Object {
                                    "clear": [Function],
                                    "get": [Function],
                                    "notify": [Function],
                                    "subscribe": [Function],
                                  },
                                  "onStateChange": [Function],
                                  "parentSub": undefined,
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                  "unsubscribe": [Function],
                                }
                              }
                              updateOn="change"
                              updateOnEnter={true}
                              withField={true}
                            >
                              <ComponentWrapper
                                className=""
                                component={[Function]}
                              >
                                <Component
                                  className=""
                                >
                                  <div
                                    className="form-group image "
                                  >
                                    <ul
                                      className="search__filter is-active "
                                    >
                                      <li
                                        className="title"
                                      >
                                        <label>
                                          <Connect(MultipleEditionFieldWarningBase)
                                            field="metadata.image"
                                            model="publicform"
                                            multipleEdition={false}
                                          >
                                            <MultipleEditionFieldWarningBase
                                              dispatch={[Function]}
                                              field="metadata.image"
                                              model="publicform"
                                              multipleEdition={false}
                                              touched={false}
                                            />
                                          </Connect(MultipleEditionFieldWarningBase)>
                                          <Connect(Translate)
                                            context="123"
                                          >
                                            <Translate
                                              context="123"
                                              edit={[Function]}
                                              i18nmode={false}
                                              translationKey=""
                                            >
                                              <span
                                                className="translation"
                                                onClick={[Function]}
                                              />
                                            </Translate>
                                          </Connect(Translate)>
                                        </label>
                                      </li>
                                      <li
                                        className="wide"
                                      >
                                        <div
                                          className="metadata-extractor-container"
                                        >
                                          <MediaField
                                            attachments={Array []}
                                            formModel="publicform"
                                            localAttachments={Array []}
                                            model=".metadata.image"
                                            multipleEdition={false}
                                            type={0}
                                          >
                                            <DefaultConnectedControl
                                              attachments={Array []}
                                              component={[Function]}
                                              formModel="publicform"
                                              localAttachments={Array []}
                                              model=".metadata.image"
                                              multipleEdition={false}
                                              type={0}
                                            >
                                              <Modeled(Connect(Control))
                                                attachments={Array []}
                                                component={[Function]}
                                                formModel="publicform"
                                                localAttachments={Array []}
                                                mapProps={
                                                  Object {
                                                    "disabled": [Function],
                                                    "name": [Function],
                                                    "onBlur": [Function],
                                                    "onChange": [Function],
                                                    "onFocus": [Function],
                                                    "onKeyPress": [Function],
                                                    "value": [Function],
                                                  }
                                                }
                                                model=".metadata.image"
                                                multipleEdition={false}
                                                type={0}
                                              >
                                                <Connect(Control)
                                                  attachments={Array []}
                                                  component={[Function]}
                                                  formModel="publicform"
                                                  localAttachments={Array []}
                                                  mapProps={
                                                    Object {
                                                      "disabled": [Function],
                                                      "name": [Function],
                                                      "onBlur": [Function],
                                                      "onChange": [Function],
                                                      "onFocus": [Function],
                                                      "onKeyPress": [Function],
                                                      "value": [Function],
                                                    }
                                                  }
                                                  model="publicform.metadata.image"
                                                  multipleEdition={false}
                                                  store={
                                                    Object {
                                                      "dispatch": [Function],
                                                      "getState": [Function],
                                                      "replaceReducer": [Function],
                                                      "subscribe": [Function],
                                                      Symbol(observable): [Function],
                                                    }
                                                  }
                                                  type={0}
                                                >
                                                  <Control
                                                    asyncValidateOn="blur"
                                                    attachments={Array []}
                                                    changeAction={[Function]}
                                                    component={[Function]}
                                                    controlProps={
                                                      Object {
                                                        "attachments": Array [],
                                                        "formModel": "publicform",
                                                        "localAttachments": Array [],
                                                        "multipleEdition": false,
                                                        "type": 0,
                                                      }
                                                    }
                                                    dispatch={[Function]}
                                                    dynamic={false}
                                                    fieldValue={
                                                      Object {
                                                        "errors": Object {},
                                                        "focus": false,
                                                        "intents": Array [],
                                                        "pending": false,
                                                        "pristine": true,
                                                        "retouched": false,
                                                        "submitFailed": false,
                                                        "submitted": false,
                                                        "touched": false,
                                                        "valid": true,
                                                        "validated": false,
                                                        "validating": false,
                                                        "validity": Object {},
                                                      }
                                                    }
                                                    formModel="publicform"
                                                    getValue={[Function]}
                                                    ignore={Array []}
                                                    isToggle={false}
                                                    localAttachments={Array []}
                                                    mapProps={
                                                      Object {
                                                        "disabled": [Function],
                                                        "name": [Function],
                                                        "onBlur": [Function],
                                                        "onChange": [Function],
                                                        "onFocus": [Function],
                                                        "onKeyPress": [Function],
                                                        "value": [Function],
                                                      }
                                                    }
                                                    model="publicform.metadata.image"
                                                    multipleEdition={false}
                                                    parser={[Function]}
                                                    persist={false}
                                                    store={
                                                      Object {
                                                        "dispatch": [Function],
                                                        "getState": [Function],
                                                        "replaceReducer": [Function],
                                                        "subscribe": [Function],
                                                        Symbol(observable): [Function],
                                                      }
                                                    }
                                                    storeSubscription={
                                                      Subscription {
                                                        "listeners": Object {
                                                          "clear": [Function],
                                                          "get": [Function],
                                                          "notify": [Function],
                                                          "subscribe": [Function],
                                                        },
                                                        "onStateChange": [Function],
                                                        "parentSub": undefined,
                                                        "store": Object {
                                                          "dispatch": [Function],
                                                          "getState": [Function],
                                                          "replaceReducer": [Function],
                                                          "subscribe": [Function],
                                                          Symbol(observable): [Function],
                                                        },
                                                        "unsubscribe": [Function],
                                                      }
                                                    }
                                                    type={0}
                                                    updateOn="change"
                                                    updateOnEnter={true}
                                                    withField={true}
                                                  >
                                                    <ComponentWrapper
                                                      attachments={Array []}
                                                      component={[Function]}
                                                      disabled={false}
                                                      formModel="publicform"
                                                      localAttachments={Array []}
                                                      multipleEdition={false}
                                                      name="publicform.metadata.image"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyPress={[Function]}
                                                      type={0}
                                                    >
                                                      <MediaField
                                                        attachments={Array []}
                                                        disabled={false}
                                                        formModel="publicform"
                                                        localAttachments={Array []}
                                                        multipleEdition={false}
                                                        name="publicform.metadata.image"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyPress={[Function]}
                                                        type={0}
                                                      >
                                                        <div
                                                          className="search__filter--selected__media"
                                                        >
                                                          <div
                                                            className="search__filter--selected__media-toolbar"
                                                          >
                                                            <button
                                                              className="btn"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <Connect(Icon)
                                                                icon="plus"
                                                              >
                                                                <Icon
                                                                  directionAware={false}
                                                                  icon="plus"
                                                                  locale="en"
                                                                >
                                                                  <FontAwesomeIcon
                                                                    beat={false}
                                                                    beatFade={false}
                                                                    border={false}
                                                                    bounce={false}
                                                                    className=""
                                                                    fade={false}
                                                                    fixedWidth={false}
                                                                    flip={null}
                                                                    icon="plus"
                                                                    inverse={false}
                                                                    listItem={false}
                                                                    mask={null}
                                                                    maskId={null}
                                                                    pull={null}
                                                                    pulse={false}
                                                                    rotation={null}
                                                                    shake={false}
                                                                    size={null}
                                                                    spin={false}
                                                                    spinPulse={false}
                                                                    spinReverse={false}
                                                                    swapOpacity={false}
                                                                    symbol={false}
                                                                    title=""
                                                                    titleId={null}
                                                                    transform={null}
                                                                  >
                                                                    <svg
                                                                      aria-hidden="true"
                                                                      className="svg-inline--fa fa-plus fa-w-14 "
                                                                      data-icon="plus"
                                                                      data-prefix="fas"
                                                                      focusable="false"
                                                                      role="img"
                                                                      style={Object {}}
                                                                      viewBox="0 0 448 512"
                                                                      xmlns="http://www.w3.org/2000/svg"
                                                                    >
                                                                      <path
                                                                        d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                                                                        fill="currentColor"
                                                                        style={Object {}}
                                                                      />
                                                                    </svg>
                                                                  </FontAwesomeIcon>
                                                                </Icon>
                                                              </Connect(Icon)>
                                                               
                                                              <Connect(Translate)>
                                                                <Translate
                                                                  context="System"
                                                                  edit={[Function]}
                                                                  i18nmode={true}
                                                                  translationKey="Add file"
                                                                >
                                                                  <span
                                                                    className="translation active"
                                                                    onClick={[Function]}
                                                                  >
                                                                    Add file
                                                                  </span>
                                                                </Translate>
                                                              </Connect(Translate)>
                                                            </button>
                                                          </div>
                                                          <Connect(MediaModalComponent)
                                                            attachments={Array []}
                                                            formField="publicform.metadata.image"
                                                            formModel="publicform"
                                                            isOpen={false}
                                                            multipleEdition={false}
                                                            onChange={[Function]}
                                                            onClose={[Function]}
                                                            type={0}
                                                          >
                                                            <MediaModalComponent
                                                              attachments={Array []}
                                                              formField="publicform.metadata.image"
                                                              formModel="publicform"
                                                              isOpen={false}
                                                              localAttachmentAction={[Function]}
                                                              multipleEdition={false}
                                                              onChange={[Function]}
                                                              onClose={[Function]}
                                                              rrfChange={[Function]}
                                                              type={0}
                                                            >
                                                              <Modal
                                                                ariaHideApp={false}
                                                                bodyOpenClassName="ReactModal__Body--open"
                                                                className="attachments-modal"
                                                                closeTimeoutMS={0}
                                                                contentElement={[Function]}
                                                                isOpen={false}
                                                                overlayClassName="attachments-modal__overlay"
                                                                overlayElement={[Function]}
                                                                parentSelector={[Function]}
                                                                portalClassName="ReactModalPortal"
                                                                preventScroll={false}
                                                                role="dialog"
                                                                shouldCloseOnEsc={true}
                                                                shouldCloseOnOverlayClick={true}
                                                                shouldFocusAfterRender={true}
                                                                shouldReturnFocusAfterClose={true}
                                                              >
                                                                <Portal
                                                                  containerInfo={
                                                                    <div
                                                                      class="ReactModalPortal"
                                                                    />
                                                                  }
                                                                >
                                                                  <ModalPortal
                                                                    ariaHideApp={false}
                                                                    bodyOpenClassName="ReactModal__Body--open"
                                                                    className="attachments-modal"
                                                                    closeTimeoutMS={0}
                                                                    contentElement={[Function]}
                                                                    defaultStyles={
                                                                      Object {
                                                                        "content": Object {
                                                                          "WebkitOverflowScrolling": "touch",
                                                                          "background": "#fff",
                                                                          "border": "1px solid #ccc",
                                                                          "borderRadius": "4px",
                                                                          "bottom": "40px",
                                                                          "left": "40px",
                                                                          "outline": "none",
                                                                          "overflow": "auto",
                                                                          "padding": "20px",
                                                                          "position": "absolute",
                                                                          "right": "40px",
                                                                          "top": "40px",
                                                                        },
                                                                        "overlay": Object {
                                                                          "backgroundColor": "rgba(255, 255, 255, 0.75)",
                                                                          "bottom": 0,
                                                                          "left": 0,
                                                                          "position": "fixed",
                                                                          "right": 0,
                                                                          "top": 0,
                                                                        },
                                                                      }
                                                                    }
                                                                    isOpen={false}
                                                                    overlayClassName="attachments-modal__overlay"
                                                                    overlayElement={[Function]}
                                                                    parentSelector={[Function]}
                                                                    portalClassName="ReactModalPortal"
                                                                    preventScroll={false}
                                                                    role="dialog"
                                                                    shouldCloseOnEsc={true}
                                                                    shouldCloseOnOverlayClick={true}
                                                                    shouldFocusAfterRender={true}
                                                                    shouldReturnFocusAfterClose={true}
                                                                    style={
                                                                      Object {
                                                                        "content": Object {},
                                                                        "overlay": Object {},
                                                                      }
                                                                    }
                                                                  />
                                                                </Portal>
                                                              </Modal>
                                                            </MediaModalComponent>
                                                          </Connect(MediaModalComponent)>
                                                        </div>
                                                      </MediaField>
                                                    </ComponentWrapper>
                                                  </Control>
                                                </Connect(Control)>
                                              </Modeled(Connect(Control))>
                                            </DefaultConnectedControl>
                                          </MediaField>
                                        </div>
                                      </li>
                                    </ul>
                                  </div>
                                </Component>
                              </ComponentWrapper>
                            </Control>
                          </Connect(Control)>
                        </Modeled(Connect(Control))>
                      </FormGroup>
                    </Connect(FormGroup)>
                  </div>
                </MetadataFormFields>
              </Connect(MetadataFormFields)>
              <Connect(FormGroup)
                key="captcha"
                model=".captcha"
              >
                <FormGroup
                  className=""
                  dispatch={[Function]}
                  hasError={false}
                  model=".captcha"
                >
                  <Modeled(Connect(Control))
                    component={[Function]}
                    mapProps={
                      Object {
                        "className": [Function],
                      }
                    }
                    model=".captcha"
                  >
                    <Connect(Control)
                      component={[Function]}
                      mapProps={
                        Object {
                          "className": [Function],
                        }
                      }
                      model="publicform.captcha"
                      store={
                        Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(observable): [Function],
                        }
                      }
                    >
                      <Control
                        asyncValidateOn="blur"
                        changeAction={[Function]}
                        component={[Function]}
                        controlProps={
                          Object {
                            "children": <ul
                              className="search__filter"
                            >
                              <li>
                                <label>
                                  <Connect(Translate)>
                                    Captcha
                                  </Connect(Translate)>
                                  <span
                                    className="required"
                                  >
                                    *
                                  </span>
                                </label>
                              </li>
                              <li
                                className="wide"
                              >
                                <Captcha
                                  model=".captcha"
                                  refresh={[Function]}
                                  remote={false}
                                />
                              </li>
                            </ul>,
                          }
                        }
                        dispatch={[Function]}
                        dynamic={false}
                        fieldValue={
                          Object {
                            "errors": Object {
                              "required": true,
                            },
                            "focus": false,
                            "initialValue": null,
                            "intents": Array [],
                            "model": "publicform.captcha",
                            "pending": false,
                            "pristine": true,
                            "retouched": false,
                            "submitFailed": false,
                            "submitted": false,
                            "touched": false,
                            "valid": false,
                            "validated": true,
                            "validating": false,
                            "validity": Object {
                              "required": false,
                            },
                            "value": null,
                          }
                        }
                        getValue={[Function]}
                        ignore={Array []}
                        isToggle={false}
                        mapProps={
                          Object {
                            "className": [Function],
                          }
                        }
                        model="publicform.captcha"
                        parser={[Function]}
                        persist={false}
                        store={
                          Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          }
                        }
                        storeSubscription={
                          Subscription {
                            "listeners": Object {
                              "clear": [Function],
                              "get": [Function],
                              "notify": [Function],
                              "subscribe": [Function],
                            },
                            "onStateChange": [Function],
                            "parentSub": undefined,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                            "unsubscribe": [Function],
                          }
                        }
                        updateOn="change"
                        updateOnEnter={true}
                        withField={true}
                      >
                        <ComponentWrapper
                          className=""
                          component={[Function]}
                        >
                          <Component
                            className=""
                          >
                            <div
                              className="form-group  "
                            >
                              <ul
                                className="search__filter"
                              >
                                <li>
                                  <label>
                                    <Connect(Translate)>
                                      <Translate
                                        context="System"
                                        edit={[Function]}
                                        i18nmode={true}
                                        translationKey="Captcha"
                                      >
                                        <span
                                          className="translation active"
                                          onClick={[Function]}
                                        >
                                          Captcha
                                        </span>
                                      </Translate>
                                    </Connect(Translate)>
                                    <span
                                      className="required"
                                    >
                                      *
                                    </span>
                                  </label>
                                </li>
                                <li
                                  className="wide"
                                >
                                  <Captcha
                                    model=".captcha"
                                    refresh={
                                      [MockFunction] {
                                        "calls": Array [
                                          Array [
                                            [MockFunction] {
                                              "calls": [Circular],
                                              "results": Array [
                                                Object {
                                                  "type": "return",
                                                  "value": undefined,
                                                },
                                              ],
                                            },
                                          ],
                                        ],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      }
                                    }
                                    remote={false}
                                  >
                                    <DefaultConnectedControl
                                      component={[Function]}
                                      model=".captcha"
                                      refresh={[Function]}
                                      remote={false}
                                    >
                                      <Modeled(Connect(Control))
                                        component={[Function]}
                                        mapProps={
                                          Object {
                                            "disabled": [Function],
                                            "name": [Function],
                                            "onBlur": [Function],
                                            "onChange": [Function],
                                            "onFocus": [Function],
                                            "onKeyPress": [Function],
                                            "value": [Function],
                                          }
                                        }
                                        model=".captcha"
                                        refresh={[Function]}
                                        remote={false}
                                      >
                                        <Connect(Control)
                                          component={[Function]}
                                          mapProps={
                                            Object {
                                              "disabled": [Function],
                                              "name": [Function],
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "onFocus": [Function],
                                              "onKeyPress": [Function],
                                              "value": [Function],
                                            }
                                          }
                                          model="publicform.captcha"
                                          refresh={[Function]}
                                          remote={false}
                                          store={
                                            Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            }
                                          }
                                        >
                                          <Control
                                            asyncValidateOn="blur"
                                            changeAction={[Function]}
                                            component={[Function]}
                                            controlProps={
                                              Object {
                                                "refresh": [Function],
                                                "remote": false,
                                              }
                                            }
                                            dispatch={[Function]}
                                            dynamic={false}
                                            fieldValue={
                                              Object {
                                                "errors": Object {
                                                  "required": true,
                                                },
                                                "focus": false,
                                                "initialValue": null,
                                                "intents": Array [],
                                                "model": "publicform.captcha",
                                                "pending": false,
                                                "pristine": true,
                                                "retouched": false,
                                                "submitFailed": false,
                                                "submitted": false,
                                                "touched": false,
                                                "valid": false,
                                                "validated": true,
                                                "validating": false,
                                                "validity": Object {
                                                  "required": false,
                                                },
                                                "value": null,
                                              }
                                            }
                                            getValue={[Function]}
                                            ignore={Array []}
                                            isToggle={false}
                                            mapProps={
                                              Object {
                                                "disabled": [Function],
                                                "name": [Function],
                                                "onBlur": [Function],
                                                "onChange": [Function],
                                                "onFocus": [Function],
                                                "onKeyPress": [Function],
                                                "value": [Function],
                                              }
                                            }
                                            model="publicform.captcha"
                                            parser={[Function]}
                                            persist={false}
                                            refresh={[Function]}
                                            remote={false}
                                            store={
                                              Object {
                                                "dispatch": [Function],
                                                "getState": [Function],
                                                "replaceReducer": [Function],
                                                "subscribe": [Function],
                                                Symbol(observable): [Function],
                                              }
                                            }
                                            storeSubscription={
                                              Subscription {
                                                "listeners": Object {
                                                  "clear": [Function],
                                                  "get": [Function],
                                                  "notify": [Function],
                                                  "subscribe": [Function],
                                                },
                                                "onStateChange": [Function],
                                                "parentSub": undefined,
                                                "store": Object {
                                                  "dispatch": [Function],
                                                  "getState": [Function],
                                                  "replaceReducer": [Function],
                                                  "subscribe": [Function],
                                                  Symbol(observable): [Function],
                                                },
                                                "unsubscribe": [Function],
                                              }
                                            }
                                            updateOn="change"
                                            updateOnEnter={true}
                                            withField={true}
                                          >
                                            <ComponentWrapper
                                              component={[Function]}
                                              disabled={false}
                                              name="publicform.captcha"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyPress={[Function]}
                                              refresh={[Function]}
                                              remote={false}
                                            >
                                              <Captcha
                                                disabled={false}
                                                name="publicform.captcha"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyPress={[Function]}
                                                refresh={[Function]}
                                                remote={false}
                                                value={
                                                  Object {
                                                    "id": "",
                                                    "text": "",
                                                  }
                                                }
                                              >
                                                <div
                                                  className="captcha"
                                                >
                                                  <div
                                                    dangerouslySetInnerHTML={
                                                      Object {
                                                        "__html": "",
                                                      }
                                                    }
                                                  />
                                                  <input
                                                    className="form-control"
                                                    onChange={[Function]}
                                                    value=""
                                                  />
                                                </div>
                                              </Captcha>
                                            </ComponentWrapper>
                                          </Control>
                                        </Connect(Control)>
                                      </Modeled(Connect(Control))>
                                    </DefaultConnectedControl>
                                  </Captcha>
                                </li>
                              </ul>
                            </div>
                          </Component>
                        </ComponentWrapper>
                      </Control>
                    </Connect(Control)>
                  </Modeled(Connect(Control))>
                </FormGroup>
              </Connect(FormGroup)>
              <button
                className="btn btn-success"
                type="submit"
              >
                <Connect(Translate)>
                  <Translate
                    context="System"
                    edit={[Function]}
                    i18nmode={true}
                    translationKey="Submit"
                  >
                    <span
                      className="translation active"
                      onClick={[Function]}
                    >
                      Submit
                    </span>
                  </Translate>
                </Connect(Translate)>
              </button>
            </div>
          </form>
        </Form>
      </Connect(Form)>
    </LocalForm>
  </PublicForm>
</Provider>
`;

exports[`PublicForm should render a form with file and attachments 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <PublicForm
    attachments={true}
    file={true}
    remote={false}
    submit={[Function]}
    template={
      Immutable.Map {
        "_id": "123",
        "commonProperties": Immutable.List [
          Immutable.Map {
            "label": "Title changed",
            "name": "title",
            "generatedId": false,
          },
        ],
        "properties": Immutable.List [
          Immutable.Map {
            "type": "text",
            "name": "text",
          },
          Immutable.Map {
            "type": "image",
            "name": "image",
          },
        ],
      }
    }
    thesauris={Immutable.List []}
  >
    <LocalForm
      getDispatch={[Function]}
      initialState={Object {}}
      model="publicform"
      onSubmit={[Function]}
      validators={
        Object {
          "captcha": Object {
            "required": [Function],
          },
          "title": Object {
            "required": [Function],
          },
        }
      }
    >
      <Connect(Form)
        getDispatch={[Function]}
        model="publicform"
        onSubmit={[Function]}
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
        validators={
          Object {
            "captcha": Object {
              "required": [Function],
            },
            "title": Object {
              "required": [Function],
            },
          }
        }
      >
        <Form
          component="form"
          dispatch={[Function]}
          formValue={
            Object {
              "$form": Object {
                "errors": false,
                "focus": false,
                "initialValue": Object {
                  "captcha": null,
                  "title": null,
                },
                "intents": Array [],
                "model": "publicform",
                "pending": false,
                "pristine": true,
                "retouched": false,
                "submitFailed": false,
                "submitted": false,
                "touched": false,
                "valid": false,
                "validated": true,
                "validating": false,
                "validity": true,
                "value": Object {
                  "captcha": null,
                  "title": null,
                },
              },
              "captcha": Object {
                "errors": Object {
                  "required": true,
                },
                "focus": false,
                "initialValue": null,
                "intents": Array [],
                "model": "publicform.captcha",
                "pending": false,
                "pristine": true,
                "retouched": false,
                "submitFailed": false,
                "submitted": false,
                "touched": false,
                "valid": false,
                "validated": true,
                "validating": false,
                "validity": Object {
                  "required": false,
                },
                "value": null,
              },
              "title": Object {
                "errors": Object {
                  "required": true,
                },
                "focus": false,
                "initialValue": null,
                "intents": Array [],
                "model": "publicform.title",
                "pending": false,
                "pristine": true,
                "retouched": false,
                "submitFailed": false,
                "submitted": false,
                "touched": false,
                "valid": false,
                "validated": true,
                "validating": false,
                "validity": Object {
                  "required": false,
                },
                "value": null,
              },
            }
          }
          getDispatch={[Function]}
          model="publicform"
          modelValue={Object {}}
          onSubmit={[Function]}
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            }
          }
          storeSubscription={
            Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": undefined,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(observable): [Function],
              },
              "unsubscribe": [Function],
            }
          }
          validateOn="change"
          validators={
            Object {
              "captcha": Object {
                "required": [Function],
              },
              "title": Object {
                "required": [Function],
              },
            }
          }
        >
          <form
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <div
              className="public-form"
            >
              <Connect(FormGroup)
                key="title"
                model=".title"
              >
                <FormGroup
                  className=""
                  dispatch={[Function]}
                  hasError={false}
                  model=".title"
                >
                  <Modeled(Connect(Control))
                    component={[Function]}
                    mapProps={
                      Object {
                        "className": [Function],
                      }
                    }
                    model=".title"
                  >
                    <Connect(Control)
                      component={[Function]}
                      mapProps={
                        Object {
                          "className": [Function],
                        }
                      }
                      model="publicform.title"
                      store={
                        Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(observable): [Function],
                        }
                      }
                    >
                      <Control
                        asyncValidateOn="blur"
                        changeAction={[Function]}
                        component={[Function]}
                        controlProps={
                          Object {
                            "children": <ul
                              className="search__filter"
                            >
                              <li>
                                <label
                                  htmlFor="title"
                                >
                                  <Connect(Translate)
                                    context="123"
                                  >
                                    Title changed
                                  </Connect(Translate)>
                                  <span
                                    className="required"
                                  >
                                    *
                                  </span>
                                </label>
                              </li>
                              <li
                                className="wide"
                              >
                                <DefaultConnectedControlText
                                  className="form-control"
                                  id="title"
                                  model=".title"
                                />
                              </li>
                            </ul>,
                          }
                        }
                        dispatch={[Function]}
                        dynamic={false}
                        fieldValue={
                          Object {
                            "errors": Object {
                              "required": true,
                            },
                            "focus": false,
                            "initialValue": null,
                            "intents": Array [],
                            "model": "publicform.title",
                            "pending": false,
                            "pristine": true,
                            "retouched": false,
                            "submitFailed": false,
                            "submitted": false,
                            "touched": false,
                            "valid": false,
                            "validated": true,
                            "validating": false,
                            "validity": Object {
                              "required": false,
                            },
                            "value": null,
                          }
                        }
                        getValue={[Function]}
                        ignore={Array []}
                        isToggle={false}
                        mapProps={
                          Object {
                            "className": [Function],
                          }
                        }
                        model="publicform.title"
                        parser={[Function]}
                        persist={false}
                        store={
                          Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          }
                        }
                        storeSubscription={
                          Subscription {
                            "listeners": Object {
                              "clear": [Function],
                              "get": [Function],
                              "notify": [Function],
                              "subscribe": [Function],
                            },
                            "onStateChange": [Function],
                            "parentSub": undefined,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                            "unsubscribe": [Function],
                          }
                        }
                        updateOn="change"
                        updateOnEnter={true}
                        withField={true}
                      >
                        <ComponentWrapper
                          className=""
                          component={[Function]}
                        >
                          <Component
                            className=""
                          >
                            <div
                              className="form-group  "
                            >
                              <ul
                                className="search__filter"
                              >
                                <li>
                                  <label
                                    htmlFor="title"
                                  >
                                    <Connect(Translate)
                                      context="123"
                                    >
                                      <Translate
                                        context="123"
                                        edit={[Function]}
                                        i18nmode={false}
                                        translationKey="Title changed"
                                      >
                                        <span
                                          className="translation"
                                          onClick={[Function]}
                                        >
                                          Title changed
                                        </span>
                                      </Translate>
                                    </Connect(Translate)>
                                    <span
                                      className="required"
                                    >
                                      *
                                    </span>
                                  </label>
                                </li>
                                <li
                                  className="wide"
                                >
                                  <DefaultConnectedControlText
                                    className="form-control"
                                    id="title"
                                    model=".title"
                                  >
                                    <Modeled(Connect(Control))
                                      className="form-control"
                                      component="input"
                                      id="title"
                                      mapProps={
                                        Object {
                                          "disabled": [Function],
                                          "name": [Function],
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onFocus": [Function],
                                          "onKeyPress": [Function],
                                          "type": "text",
                                          "value": [Function],
                                        }
                                      }
                                      model=".title"
                                    >
                                      <Connect(Control)
                                        className="form-control"
                                        component="input"
                                        id="title"
                                        mapProps={
                                          Object {
                                            "disabled": [Function],
                                            "name": [Function],
                                            "onBlur": [Function],
                                            "onChange": [Function],
                                            "onFocus": [Function],
                                            "onKeyPress": [Function],
                                            "type": "text",
                                            "value": [Function],
                                          }
                                        }
                                        model="publicform.title"
                                        store={
                                          Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          }
                                        }
                                      >
                                        <Control
                                          asyncValidateOn="blur"
                                          changeAction={[Function]}
                                          className="form-control"
                                          component="input"
                                          controlProps={
                                            Object {
                                              "className": "form-control",
                                              "id": "title",
                                            }
                                          }
                                          dispatch={[Function]}
                                          dynamic={false}
                                          fieldValue={
                                            Object {
                                              "errors": Object {
                                                "required": true,
                                              },
                                              "focus": false,
                                              "initialValue": null,
                                              "intents": Array [],
                                              "model": "publicform.title",
                                              "pending": false,
                                              "pristine": true,
                                              "retouched": false,
                                              "submitFailed": false,
                                              "submitted": false,
                                              "touched": false,
                                              "valid": false,
                                              "validated": true,
                                              "validating": false,
                                              "validity": Object {
                                                "required": false,
                                              },
                                              "value": null,
                                            }
                                          }
                                          getValue={[Function]}
                                          id="title"
                                          ignore={Array []}
                                          isToggle={false}
                                          mapProps={
                                            Object {
                                              "disabled": [Function],
                                              "name": [Function],
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "onFocus": [Function],
                                              "onKeyPress": [Function],
                                              "type": "text",
                                              "value": [Function],
                                            }
                                          }
                                          model="publicform.title"
                                          parser={[Function]}
                                          persist={false}
                                          store={
                                            Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            }
                                          }
                                          storeSubscription={
                                            Subscription {
                                              "listeners": Object {
                                                "clear": [Function],
                                                "get": [Function],
                                                "notify": [Function],
                                                "subscribe": [Function],
                                              },
                                              "onStateChange": [Function],
                                              "parentSub": undefined,
                                              "store": Object {
                                                "dispatch": [Function],
                                                "getState": [Function],
                                                "replaceReducer": [Function],
                                                "subscribe": [Function],
                                                Symbol(observable): [Function],
                                              },
                                              "unsubscribe": [Function],
                                            }
                                          }
                                          updateOn="change"
                                          updateOnEnter={true}
                                          withField={true}
                                        >
                                          <ComponentWrapper
                                            className="form-control"
                                            component="input"
                                            disabled={false}
                                            id="title"
                                            name="publicform.title"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyPress={[Function]}
                                            type="text"
                                            value=""
                                          >
                                            <input
                                              className="form-control"
                                              disabled={false}
                                              id="title"
                                              name="publicform.title"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyPress={[Function]}
                                              type="text"
                                              value=""
                                            />
                                          </ComponentWrapper>
                                        </Control>
                                      </Connect(Control)>
                                    </Modeled(Connect(Control))>
                                  </DefaultConnectedControlText>
                                </li>
                              </ul>
                            </div>
                          </Component>
                        </ComponentWrapper>
                      </Control>
                    </Connect(Control)>
                  </Modeled(Connect(Control))>
                </FormGroup>
              </Connect(FormGroup)>
              <Connect(MetadataFormFields)
                boundChange={[Function]}
                model="publicform"
                template={
                  Immutable.Map {
                    "_id": "123",
                    "commonProperties": Immutable.List [
                      Immutable.Map {
                        "label": "Title changed",
                        "name": "title",
                        "generatedId": false,
                      },
                    ],
                    "properties": Immutable.List [
                      Immutable.Map {
                        "type": "text",
                        "name": "text",
                      },
                      Immutable.Map {
                        "type": "image",
                        "name": "image",
                      },
                    ],
                  }
                }
                thesauris={Immutable.List []}
              >
                <MetadataFormFields
                  attachments={Immutable.List []}
                  boundChange={[Function]}
                  change={[Function]}
                  dateFormat="dateFormat"
                  entityThesauris={Immutable.Map {}}
                  highlightedProps={Array []}
                  localAttachments={Array []}
                  locale="en"
                  model="publicform"
                  multipleEdition={false}
                  storeKey=""
                  template={
                    Immutable.Map {
                      "_id": "123",
                      "commonProperties": Immutable.List [
                        Immutable.Map {
                          "label": "Title changed",
                          "name": "title",
                          "generatedId": false,
                        },
                      ],
                      "properties": Immutable.List [
                        Immutable.Map {
                          "type": "text",
                          "name": "text",
                        },
                        Immutable.Map {
                          "type": "image",
                          "name": "image",
                        },
                      ],
                    }
                  }
                  thesauris={Immutable.List []}
                >
                  <div>
                    <Connect(FormGroup)
                      className="text"
                      key="text"
                      model=".metadata.text"
                    >
                      <FormGroup
                        className="text"
                        dispatch={[Function]}
                        hasError={false}
                        model=".metadata.text"
                      >
                        <Modeled(Connect(Control))
                          component={[Function]}
                          mapProps={
                            Object {
                              "className": [Function],
                            }
                          }
                          model=".metadata.text"
                        >
                          <Connect(Control)
                            component={[Function]}
                            mapProps={
                              Object {
                                "className": [Function],
                              }
                            }
                            model="publicform.metadata.text"
                            store={
                              Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              }
                            }
                          >
                            <Control
                              asyncValidateOn="blur"
                              changeAction={[Function]}
                              component={[Function]}
                              controlProps={
                                Object {
                                  "children": <ul
                                    className="search__filter is-active "
                                  >
                                    <li
                                      className="title"
                                    >
                                      <label>
                                        <Connect(MultipleEditionFieldWarningBase)
                                          field="metadata.text"
                                          model="publicform"
                                          multipleEdition={false}
                                        />
                                        <Connect(Translate)
                                          context="123"
                                        />
                                        
                                      </label>
                                    </li>
                                    <li
                                      className="wide"
                                    >
                                      <div
                                        className="metadata-extractor-container"
                                      >
                                        <Modeled(Connect(Field))
                                          model=".metadata.text"
                                        >
                                          <input
                                            className="form-control"
                                            type="text"
                                          />
                                        </Modeled(Connect(Field))>
                                      </div>
                                    </li>
                                  </ul>,
                                }
                              }
                              dispatch={[Function]}
                              dynamic={false}
                              fieldValue={
                                Object {
                                  "errors": Object {},
                                  "focus": false,
                                  "intents": Array [],
                                  "pending": false,
                                  "pristine": true,
                                  "retouched": false,
                                  "submitFailed": false,
                                  "submitted": false,
                                  "touched": false,
                                  "valid": true,
                                  "validated": false,
                                  "validating": false,
                                  "validity": Object {},
                                }
                              }
                              getValue={[Function]}
                              ignore={Array []}
                              isToggle={false}
                              mapProps={
                                Object {
                                  "className": [Function],
                                }
                              }
                              model="publicform.metadata.text"
                              parser={[Function]}
                              persist={false}
                              store={
                                Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                }
                              }
                              storeSubscription={
                                Subscription {
                                  "listeners": Object {
                                    "clear": [Function],
                                    "get": [Function],
                                    "notify": [Function],
                                    "subscribe": [Function],
                                  },
                                  "onStateChange": [Function],
                                  "parentSub": undefined,
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                  "unsubscribe": [Function],
                                }
                              }
                              updateOn="change"
                              updateOnEnter={true}
                              withField={true}
                            >
                              <ComponentWrapper
                                className=""
                                component={[Function]}
                              >
                                <Component
                                  className=""
                                >
                                  <div
                                    className="form-group text "
                                  >
                                    <ul
                                      className="search__filter is-active "
                                    >
                                      <li
                                        className="title"
                                      >
                                        <label>
                                          <Connect(MultipleEditionFieldWarningBase)
                                            field="metadata.text"
                                            model="publicform"
                                            multipleEdition={false}
                                          >
                                            <MultipleEditionFieldWarningBase
                                              dispatch={[Function]}
                                              field="metadata.text"
                                              model="publicform"
                                              multipleEdition={false}
                                              touched={false}
                                            />
                                          </Connect(MultipleEditionFieldWarningBase)>
                                          <Connect(Translate)
                                            context="123"
                                          >
                                            <Translate
                                              context="123"
                                              edit={[Function]}
                                              i18nmode={false}
                                              translationKey=""
                                            >
                                              <span
                                                className="translation"
                                                onClick={[Function]}
                                              />
                                            </Translate>
                                          </Connect(Translate)>
                                        </label>
                                      </li>
                                      <li
                                        className="wide"
                                      >
                                        <div
                                          className="metadata-extractor-container"
                                        >
                                          <Modeled(Connect(Field))
                                            model=".metadata.text"
                                          >
                                            <Connect(Field)
                                              model="publicform.metadata.text"
                                              store={
                                                Object {
                                                  "dispatch": [Function],
                                                  "getState": [Function],
                                                  "replaceReducer": [Function],
                                                  "subscribe": [Function],
                                                  Symbol(observable): [Function],
                                                }
                                              }
                                            >
                                              <Field
                                                asyncValidateOn="blur"
                                                changeAction={[Function]}
                                                component="div"
                                                dispatch={[Function]}
                                                dynamic={true}
                                                fieldValue={
                                                  Object {
                                                    "errors": Object {},
                                                    "focus": false,
                                                    "intents": Array [],
                                                    "pending": false,
                                                    "pristine": true,
                                                    "retouched": false,
                                                    "submitFailed": false,
                                                    "submitted": false,
                                                    "touched": false,
                                                    "valid": true,
                                                    "validated": false,
                                                    "validating": false,
                                                    "validity": Object {},
                                                  }
                                                }
                                                formatter={[Function]}
                                                model="publicform.metadata.text"
                                                parser={[Function]}
                                                store={
                                                  Object {
                                                    "dispatch": [Function],
                                                    "getState": [Function],
                                                    "replaceReducer": [Function],
                                                    "subscribe": [Function],
                                                    Symbol(observable): [Function],
                                                  }
                                                }
                                                storeSubscription={
                                                  Subscription {
                                                    "listeners": Object {
                                                      "clear": [Function],
                                                      "get": [Function],
                                                      "notify": [Function],
                                                      "subscribe": [Function],
                                                    },
                                                    "onStateChange": [Function],
                                                    "parentSub": undefined,
                                                    "store": Object {
                                                      "dispatch": [Function],
                                                      "getState": [Function],
                                                      "replaceReducer": [Function],
                                                      "subscribe": [Function],
                                                      Symbol(observable): [Function],
                                                    },
                                                    "unsubscribe": [Function],
                                                  }
                                                }
                                                updateOn="change"
                                              >
                                                <div>
                                                  <DefaultConnectedControl
                                                    asyncValidateOn="blur"
                                                    changeAction={[Function]}
                                                    component="input"
                                                    control={
                                                      <input
                                                        className="form-control"
                                                        type="text"
                                                      />
                                                    }
                                                    controlProps={
                                                      Object {
                                                        "className": "form-control",
                                                        "type": "text",
                                                      }
                                                    }
                                                    dispatch={[Function]}
                                                    dynamic={true}
                                                    fieldValue={
                                                      Object {
                                                        "errors": Object {},
                                                        "focus": false,
                                                        "intents": Array [],
                                                        "pending": false,
                                                        "pristine": true,
                                                        "retouched": false,
                                                        "submitFailed": false,
                                                        "submitted": false,
                                                        "touched": false,
                                                        "valid": true,
                                                        "validated": false,
                                                        "validating": false,
                                                        "validity": Object {},
                                                      }
                                                    }
                                                    formatter={[Function]}
                                                    mapProps={
                                                      Object {
                                                        "disabled": [Function],
                                                        "name": [Function],
                                                        "onBlur": [Function],
                                                        "onChange": [Function],
                                                        "onFocus": [Function],
                                                        "onKeyPress": [Function],
                                                        "value": [Function],
                                                      }
                                                    }
                                                    model="publicform.metadata.text"
                                                    parser={[Function]}
                                                    store={
                                                      Object {
                                                        "dispatch": [Function],
                                                        "getState": [Function],
                                                        "replaceReducer": [Function],
                                                        "subscribe": [Function],
                                                        Symbol(observable): [Function],
                                                      }
                                                    }
                                                    storeSubscription={
                                                      Subscription {
                                                        "listeners": Object {
                                                          "clear": [Function],
                                                          "get": [Function],
                                                          "notify": [Function],
                                                          "subscribe": [Function],
                                                        },
                                                        "onStateChange": [Function],
                                                        "parentSub": undefined,
                                                        "store": Object {
                                                          "dispatch": [Function],
                                                          "getState": [Function],
                                                          "replaceReducer": [Function],
                                                          "subscribe": [Function],
                                                          Symbol(observable): [Function],
                                                        },
                                                        "unsubscribe": [Function],
                                                      }
                                                    }
                                                    updateOn="change"
                                                  >
                                                    <Modeled(Connect(Control))
                                                      asyncValidateOn="blur"
                                                      changeAction={[Function]}
                                                      component="input"
                                                      control={
                                                        <input
                                                          className="form-control"
                                                          type="text"
                                                        />
                                                      }
                                                      controlProps={
                                                        Object {
                                                          "className": "form-control",
                                                          "type": "text",
                                                        }
                                                      }
                                                      dispatch={[Function]}
                                                      dynamic={true}
                                                      fieldValue={
                                                        Object {
                                                          "errors": Object {},
                                                          "focus": false,
                                                          "intents": Array [],
                                                          "pending": false,
                                                          "pristine": true,
                                                          "retouched": false,
                                                          "submitFailed": false,
                                                          "submitted": false,
                                                          "touched": false,
                                                          "valid": true,
                                                          "validated": false,
                                                          "validating": false,
                                                          "validity": Object {},
                                                        }
                                                      }
                                                      formatter={[Function]}
                                                      mapProps={
                                                        Object {
                                                          "disabled": [Function],
                                                          "name": [Function],
                                                          "onBlur": [Function],
                                                          "onChange": [Function],
                                                          "onFocus": [Function],
                                                          "onKeyPress": [Function],
                                                          "value": [Function],
                                                        }
                                                      }
                                                      model="publicform.metadata.text"
                                                      parser={[Function]}
                                                      store={
                                                        Object {
                                                          "dispatch": [Function],
                                                          "getState": [Function],
                                                          "replaceReducer": [Function],
                                                          "subscribe": [Function],
                                                          Symbol(observable): [Function],
                                                        }
                                                      }
                                                      storeSubscription={
                                                        Subscription {
                                                          "listeners": Object {
                                                            "clear": [Function],
                                                            "get": [Function],
                                                            "notify": [Function],
                                                            "subscribe": [Function],
                                                          },
                                                          "onStateChange": [Function],
                                                          "parentSub": undefined,
                                                          "store": Object {
                                                            "dispatch": [Function],
                                                            "getState": [Function],
                                                            "replaceReducer": [Function],
                                                            "subscribe": [Function],
                                                            Symbol(observable): [Function],
                                                          },
                                                          "unsubscribe": [Function],
                                                        }
                                                      }
                                                      updateOn="change"
                                                    >
                                                      <Connect(Control)
                                                        asyncValidateOn="blur"
                                                        changeAction={[Function]}
                                                        component="input"
                                                        control={
                                                          <input
                                                            className="form-control"
                                                            type="text"
                                                          />
                                                        }
                                                        controlProps={
                                                          Object {
                                                            "className": "form-control",
                                                            "type": "text",
                                                          }
                                                        }
                                                        dispatch={[Function]}
                                                        dynamic={true}
                                                        fieldValue={
                                                          Object {
                                                            "errors": Object {},
                                                            "focus": false,
                                                            "intents": Array [],
                                                            "pending": false,
                                                            "pristine": true,
                                                            "retouched": false,
                                                            "submitFailed": false,
                                                            "submitted": false,
                                                            "touched": false,
                                                            "valid": true,
                                                            "validated": false,
                                                            "validating": false,
                                                            "validity": Object {},
                                                          }
                                                        }
                                                        formatter={[Function]}
                                                        mapProps={
                                                          Object {
                                                            "disabled": [Function],
                                                            "name": [Function],
                                                            "onBlur": [Function],
                                                            "onChange": [Function],
                                                            "onFocus": [Function],
                                                            "onKeyPress": [Function],
                                                            "value": [Function],
                                                          }
                                                        }
                                                        model="publicform.metadata.text"
                                                        parser={[Function]}
                                                        store={
                                                          Object {
                                                            "dispatch": [Function],
                                                            "getState": [Function],
                                                            "replaceReducer": [Function],
                                                            "subscribe": [Function],
                                                            Symbol(observable): [Function],
                                                          }
                                                        }
                                                        storeSubscription={
                                                          Subscription {
                                                            "listeners": Object {
                                                              "clear": [Function],
                                                              "get": [Function],
                                                              "notify": [Function],
                                                              "subscribe": [Function],
                                                            },
                                                            "onStateChange": [Function],
                                                            "parentSub": undefined,
                                                            "store": Object {
                                                              "dispatch": [Function],
                                                              "getState": [Function],
                                                              "replaceReducer": [Function],
                                                              "subscribe": [Function],
                                                              Symbol(observable): [Function],
                                                            },
                                                            "unsubscribe": [Function],
                                                          }
                                                        }
                                                        updateOn="change"
                                                      >
                                                        <Control
                                                          asyncValidateOn="blur"
                                                          changeAction={[Function]}
                                                          component="input"
                                                          control={
                                                            <input
                                                              className="form-control"
                                                              type="text"
                                                            />
                                                          }
                                                          controlProps={
                                                            Object {
                                                              "className": "form-control",
                                                              "componentMap": undefined,
                                                              "storeSubscription": Subscription {
                                                                "listeners": Object {
                                                                  "clear": [Function],
                                                                  "get": [Function],
                                                                  "notify": [Function],
                                                                  "subscribe": [Function],
                                                                },
                                                                "onStateChange": [Function],
                                                                "parentSub": undefined,
                                                                "store": Object {
                                                                  "dispatch": [Function],
                                                                  "getState": [Function],
                                                                  "replaceReducer": [Function],
                                                                  "subscribe": [Function],
                                                                  Symbol(observable): [Function],
                                                                },
                                                                "unsubscribe": [Function],
                                                              },
                                                              "type": "text",
                                                            }
                                                          }
                                                          dispatch={[Function]}
                                                          dynamic={true}
                                                          fieldValue={
                                                            Object {
                                                              "errors": Object {},
                                                              "focus": false,
                                                              "intents": Array [],
                                                              "pending": false,
                                                              "pristine": true,
                                                              "retouched": false,
                                                              "submitFailed": false,
                                                              "submitted": false,
                                                              "touched": false,
                                                              "valid": true,
                                                              "validated": false,
                                                              "validating": false,
                                                              "validity": Object {},
                                                            }
                                                          }
                                                          formatter={[Function]}
                                                          getValue={[Function]}
                                                          ignore={Array []}
                                                          isToggle={false}
                                                          mapProps={
                                                            Object {
                                                              "disabled": [Function],
                                                              "name": [Function],
                                                              "onBlur": [Function],
                                                              "onChange": [Function],
                                                              "onFocus": [Function],
                                                              "onKeyPress": [Function],
                                                              "value": [Function],
                                                            }
                                                          }
                                                          model="publicform.metadata.text"
                                                          parser={[Function]}
                                                          persist={false}
                                                          store={
                                                            Object {
                                                              "dispatch": [Function],
                                                              "getState": [Function],
                                                              "replaceReducer": [Function],
                                                              "subscribe": [Function],
                                                              Symbol(observable): [Function],
                                                            }
                                                          }
                                                          storeSubscription={
                                                            Subscription {
                                                              "listeners": Object {
                                                                "clear": [Function],
                                                                "get": [Function],
                                                                "notify": [Function],
                                                                "subscribe": [Function],
                                                              },
                                                              "onStateChange": [Function],
                                                              "parentSub": Subscription {
                                                                "listeners": Object {
                                                                  "clear": [Function],
                                                                  "get": [Function],
                                                                  "notify": [Function],
                                                                  "subscribe": [Function],
                                                                },
                                                                "onStateChange": [Function],
                                                                "parentSub": undefined,
                                                                "store": Object {
                                                                  "dispatch": [Function],
                                                                  "getState": [Function],
                                                                  "replaceReducer": [Function],
                                                                  "subscribe": [Function],
                                                                  Symbol(observable): [Function],
                                                                },
                                                                "unsubscribe": [Function],
                                                              },
                                                              "store": Object {
                                                                "dispatch": [Function],
                                                                "getState": [Function],
                                                                "replaceReducer": [Function],
                                                                "subscribe": [Function],
                                                                Symbol(observable): [Function],
                                                              },
                                                              "unsubscribe": [Function],
                                                            }
                                                          }
                                                          updateOn="change"
                                                          updateOnEnter={true}
                                                          withField={true}
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            name="publicform.metadata.text"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            onKeyPress={[Function]}
                                                            type="text"
                                                            value=""
                                                          />
                                                        </Control>
                                                      </Connect(Control)>
                                                    </Modeled(Connect(Control))>
                                                  </DefaultConnectedControl>
                                                </div>
                                              </Field>
                                            </Connect(Field)>
                                          </Modeled(Connect(Field))>
                                        </div>
                                      </li>
                                    </ul>
                                  </div>
                                </Component>
                              </ComponentWrapper>
                            </Control>
                          </Connect(Control)>
                        </Modeled(Connect(Control))>
                      </FormGroup>
                    </Connect(FormGroup)>
                    <Connect(FormGroup)
                      className="image"
                      key="image"
                      model=".metadata.image"
                    >
                      <FormGroup
                        className="image"
                        dispatch={[Function]}
                        hasError={false}
                        model=".metadata.image"
                      >
                        <Modeled(Connect(Control))
                          component={[Function]}
                          mapProps={
                            Object {
                              "className": [Function],
                            }
                          }
                          model=".metadata.image"
                        >
                          <Connect(Control)
                            component={[Function]}
                            mapProps={
                              Object {
                                "className": [Function],
                              }
                            }
                            model="publicform.metadata.image"
                            store={
                              Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              }
                            }
                          >
                            <Control
                              asyncValidateOn="blur"
                              changeAction={[Function]}
                              component={[Function]}
                              controlProps={
                                Object {
                                  "children": <ul
                                    className="search__filter is-active "
                                  >
                                    <li
                                      className="title"
                                    >
                                      <label>
                                        <Connect(MultipleEditionFieldWarningBase)
                                          field="metadata.image"
                                          model="publicform"
                                          multipleEdition={false}
                                        />
                                        <Connect(Translate)
                                          context="123"
                                        />
                                        
                                      </label>
                                    </li>
                                    <li
                                      className="wide"
                                    >
                                      <div
                                        className="metadata-extractor-container"
                                      >
                                        <MediaField
                                          attachments={Array []}
                                          formModel="publicform"
                                          localAttachments={Array []}
                                          model=".metadata.image"
                                          multipleEdition={false}
                                          type={0}
                                        />
                                      </div>
                                    </li>
                                  </ul>,
                                }
                              }
                              dispatch={[Function]}
                              dynamic={false}
                              fieldValue={
                                Object {
                                  "errors": Object {},
                                  "focus": false,
                                  "intents": Array [],
                                  "pending": false,
                                  "pristine": true,
                                  "retouched": false,
                                  "submitFailed": false,
                                  "submitted": false,
                                  "touched": false,
                                  "valid": true,
                                  "validated": false,
                                  "validating": false,
                                  "validity": Object {},
                                }
                              }
                              getValue={[Function]}
                              ignore={Array []}
                              isToggle={false}
                              mapProps={
                                Object {
                                  "className": [Function],
                                }
                              }
                              model="publicform.metadata.image"
                              parser={[Function]}
                              persist={false}
                              store={
                                Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                }
                              }
                              storeSubscription={
                                Subscription {
                                  "listeners": Object {
                                    "clear": [Function],
                                    "get": [Function],
                                    "notify": [Function],
                                    "subscribe": [Function],
                                  },
                                  "onStateChange": [Function],
                                  "parentSub": undefined,
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                  "unsubscribe": [Function],
                                }
                              }
                              updateOn="change"
                              updateOnEnter={true}
                              withField={true}
                            >
                              <ComponentWrapper
                                className=""
                                component={[Function]}
                              >
                                <Component
                                  className=""
                                >
                                  <div
                                    className="form-group image "
                                  >
                                    <ul
                                      className="search__filter is-active "
                                    >
                                      <li
                                        className="title"
                                      >
                                        <label>
                                          <Connect(MultipleEditionFieldWarningBase)
                                            field="metadata.image"
                                            model="publicform"
                                            multipleEdition={false}
                                          >
                                            <MultipleEditionFieldWarningBase
                                              dispatch={[Function]}
                                              field="metadata.image"
                                              model="publicform"
                                              multipleEdition={false}
                                              touched={false}
                                            />
                                          </Connect(MultipleEditionFieldWarningBase)>
                                          <Connect(Translate)
                                            context="123"
                                          >
                                            <Translate
                                              context="123"
                                              edit={[Function]}
                                              i18nmode={false}
                                              translationKey=""
                                            >
                                              <span
                                                className="translation"
                                                onClick={[Function]}
                                              />
                                            </Translate>
                                          </Connect(Translate)>
                                        </label>
                                      </li>
                                      <li
                                        className="wide"
                                      >
                                        <div
                                          className="metadata-extractor-container"
                                        >
                                          <MediaField
                                            attachments={Array []}
                                            formModel="publicform"
                                            localAttachments={Array []}
                                            model=".metadata.image"
                                            multipleEdition={false}
                                            type={0}
                                          >
                                            <DefaultConnectedControl
                                              attachments={Array []}
                                              component={[Function]}
                                              formModel="publicform"
                                              localAttachments={Array []}
                                              model=".metadata.image"
                                              multipleEdition={false}
                                              type={0}
                                            >
                                              <Modeled(Connect(Control))
                                                attachments={Array []}
                                                component={[Function]}
                                                formModel="publicform"
                                                localAttachments={Array []}
                                                mapProps={
                                                  Object {
                                                    "disabled": [Function],
                                                    "name": [Function],
                                                    "onBlur": [Function],
                                                    "onChange": [Function],
                                                    "onFocus": [Function],
                                                    "onKeyPress": [Function],
                                                    "value": [Function],
                                                  }
                                                }
                                                model=".metadata.image"
                                                multipleEdition={false}
                                                type={0}
                                              >
                                                <Connect(Control)
                                                  attachments={Array []}
                                                  component={[Function]}
                                                  formModel="publicform"
                                                  localAttachments={Array []}
                                                  mapProps={
                                                    Object {
                                                      "disabled": [Function],
                                                      "name": [Function],
                                                      "onBlur": [Function],
                                                      "onChange": [Function],
                                                      "onFocus": [Function],
                                                      "onKeyPress": [Function],
                                                      "value": [Function],
                                                    }
                                                  }
                                                  model="publicform.metadata.image"
                                                  multipleEdition={false}
                                                  store={
                                                    Object {
                                                      "dispatch": [Function],
                                                      "getState": [Function],
                                                      "replaceReducer": [Function],
                                                      "subscribe": [Function],
                                                      Symbol(observable): [Function],
                                                    }
                                                  }
                                                  type={0}
                                                >
                                                  <Control
                                                    asyncValidateOn="blur"
                                                    attachments={Array []}
                                                    changeAction={[Function]}
                                                    component={[Function]}
                                                    controlProps={
                                                      Object {
                                                        "attachments": Array [],
                                                        "formModel": "publicform",
                                                        "localAttachments": Array [],
                                                        "multipleEdition": false,
                                                        "type": 0,
                                                      }
                                                    }
                                                    dispatch={[Function]}
                                                    dynamic={false}
                                                    fieldValue={
                                                      Object {
                                                        "errors": Object {},
                                                        "focus": false,
                                                        "intents": Array [],
                                                        "pending": false,
                                                        "pristine": true,
                                                        "retouched": false,
                                                        "submitFailed": false,
                                                        "submitted": false,
                                                        "touched": false,
                                                        "valid": true,
                                                        "validated": false,
                                                        "validating": false,
                                                        "validity": Object {},
                                                      }
                                                    }
                                                    formModel="publicform"
                                                    getValue={[Function]}
                                                    ignore={Array []}
                                                    isToggle={false}
                                                    localAttachments={Array []}
                                                    mapProps={
                                                      Object {
                                                        "disabled": [Function],
                                                        "name": [Function],
                                                        "onBlur": [Function],
                                                        "onChange": [Function],
                                                        "onFocus": [Function],
                                                        "onKeyPress": [Function],
                                                        "value": [Function],
                                                      }
                                                    }
                                                    model="publicform.metadata.image"
                                                    multipleEdition={false}
                                                    parser={[Function]}
                                                    persist={false}
                                                    store={
                                                      Object {
                                                        "dispatch": [Function],
                                                        "getState": [Function],
                                                        "replaceReducer": [Function],
                                                        "subscribe": [Function],
                                                        Symbol(observable): [Function],
                                                      }
                                                    }
                                                    storeSubscription={
                                                      Subscription {
                                                        "listeners": Object {
                                                          "clear": [Function],
                                                          "get": [Function],
                                                          "notify": [Function],
                                                          "subscribe": [Function],
                                                        },
                                                        "onStateChange": [Function],
                                                        "parentSub": undefined,
                                                        "store": Object {
                                                          "dispatch": [Function],
                                                          "getState": [Function],
                                                          "replaceReducer": [Function],
                                                          "subscribe": [Function],
                                                          Symbol(observable): [Function],
                                                        },
                                                        "unsubscribe": [Function],
                                                      }
                                                    }
                                                    type={0}
                                                    updateOn="change"
                                                    updateOnEnter={true}
                                                    withField={true}
                                                  >
                                                    <ComponentWrapper
                                                      attachments={Array []}
                                                      component={[Function]}
                                                      disabled={false}
                                                      formModel="publicform"
                                                      localAttachments={Array []}
                                                      multipleEdition={false}
                                                      name="publicform.metadata.image"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyPress={[Function]}
                                                      type={0}
                                                    >
                                                      <MediaField
                                                        attachments={Array []}
                                                        disabled={false}
                                                        formModel="publicform"
                                                        localAttachments={Array []}
                                                        multipleEdition={false}
                                                        name="publicform.metadata.image"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyPress={[Function]}
                                                        type={0}
                                                      >
                                                        <div
                                                          className="search__filter--selected__media"
                                                        >
                                                          <div
                                                            className="search__filter--selected__media-toolbar"
                                                          >
                                                            <button
                                                              className="btn"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <Connect(Icon)
                                                                icon="plus"
                                                              >
                                                                <Icon
                                                                  directionAware={false}
                                                                  icon="plus"
                                                                  locale="en"
                                                                >
                                                                  <FontAwesomeIcon
                                                                    beat={false}
                                                                    beatFade={false}
                                                                    border={false}
                                                                    bounce={false}
                                                                    className=""
                                                                    fade={false}
                                                                    fixedWidth={false}
                                                                    flip={null}
                                                                    icon="plus"
                                                                    inverse={false}
                                                                    listItem={false}
                                                                    mask={null}
                                                                    maskId={null}
                                                                    pull={null}
                                                                    pulse={false}
                                                                    rotation={null}
                                                                    shake={false}
                                                                    size={null}
                                                                    spin={false}
                                                                    spinPulse={false}
                                                                    spinReverse={false}
                                                                    swapOpacity={false}
                                                                    symbol={false}
                                                                    title=""
                                                                    titleId={null}
                                                                    transform={null}
                                                                  >
                                                                    <svg
                                                                      aria-hidden="true"
                                                                      className="svg-inline--fa fa-plus fa-w-14 "
                                                                      data-icon="plus"
                                                                      data-prefix="fas"
                                                                      focusable="false"
                                                                      role="img"
                                                                      style={Object {}}
                                                                      viewBox="0 0 448 512"
                                                                      xmlns="http://www.w3.org/2000/svg"
                                                                    >
                                                                      <path
                                                                        d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                                                                        fill="currentColor"
                                                                        style={Object {}}
                                                                      />
                                                                    </svg>
                                                                  </FontAwesomeIcon>
                                                                </Icon>
                                                              </Connect(Icon)>
                                                               
                                                              <Connect(Translate)>
                                                                <Translate
                                                                  context="System"
                                                                  edit={[Function]}
                                                                  i18nmode={true}
                                                                  translationKey="Add file"
                                                                >
                                                                  <span
                                                                    className="translation active"
                                                                    onClick={[Function]}
                                                                  >
                                                                    Add file
                                                                  </span>
                                                                </Translate>
                                                              </Connect(Translate)>
                                                            </button>
                                                          </div>
                                                          <Connect(MediaModalComponent)
                                                            attachments={Array []}
                                                            formField="publicform.metadata.image"
                                                            formModel="publicform"
                                                            isOpen={false}
                                                            multipleEdition={false}
                                                            onChange={[Function]}
                                                            onClose={[Function]}
                                                            type={0}
                                                          >
                                                            <MediaModalComponent
                                                              attachments={Array []}
                                                              formField="publicform.metadata.image"
                                                              formModel="publicform"
                                                              isOpen={false}
                                                              localAttachmentAction={[Function]}
                                                              multipleEdition={false}
                                                              onChange={[Function]}
                                                              onClose={[Function]}
                                                              rrfChange={[Function]}
                                                              type={0}
                                                            >
                                                              <Modal
                                                                ariaHideApp={false}
                                                                bodyOpenClassName="ReactModal__Body--open"
                                                                className="attachments-modal"
                                                                closeTimeoutMS={0}
                                                                contentElement={[Function]}
                                                                isOpen={false}
                                                                overlayClassName="attachments-modal__overlay"
                                                                overlayElement={[Function]}
                                                                parentSelector={[Function]}
                                                                portalClassName="ReactModalPortal"
                                                                preventScroll={false}
                                                                role="dialog"
                                                                shouldCloseOnEsc={true}
                                                                shouldCloseOnOverlayClick={true}
                                                                shouldFocusAfterRender={true}
                                                                shouldReturnFocusAfterClose={true}
                                                              >
                                                                <Portal
                                                                  containerInfo={
                                                                    <div
                                                                      class="ReactModalPortal"
                                                                    />
                                                                  }
                                                                >
                                                                  <ModalPortal
                                                                    ariaHideApp={false}
                                                                    bodyOpenClassName="ReactModal__Body--open"
                                                                    className="attachments-modal"
                                                                    closeTimeoutMS={0}
                                                                    contentElement={[Function]}
                                                                    defaultStyles={
                                                                      Object {
                                                                        "content": Object {
                                                                          "WebkitOverflowScrolling": "touch",
                                                                          "background": "#fff",
                                                                          "border": "1px solid #ccc",
                                                                          "borderRadius": "4px",
                                                                          "bottom": "40px",
                                                                          "left": "40px",
                                                                          "outline": "none",
                                                                          "overflow": "auto",
                                                                          "padding": "20px",
                                                                          "position": "absolute",
                                                                          "right": "40px",
                                                                          "top": "40px",
                                                                        },
                                                                        "overlay": Object {
                                                                          "backgroundColor": "rgba(255, 255, 255, 0.75)",
                                                                          "bottom": 0,
                                                                          "left": 0,
                                                                          "position": "fixed",
                                                                          "right": 0,
                                                                          "top": 0,
                                                                        },
                                                                      }
                                                                    }
                                                                    isOpen={false}
                                                                    overlayClassName="attachments-modal__overlay"
                                                                    overlayElement={[Function]}
                                                                    parentSelector={[Function]}
                                                                    portalClassName="ReactModalPortal"
                                                                    preventScroll={false}
                                                                    role="dialog"
                                                                    shouldCloseOnEsc={true}
                                                                    shouldCloseOnOverlayClick={true}
                                                                    shouldFocusAfterRender={true}
                                                                    shouldReturnFocusAfterClose={true}
                                                                    style={
                                                                      Object {
                                                                        "content": Object {},
                                                                        "overlay": Object {},
                                                                      }
                                                                    }
                                                                  />
                                                                </Portal>
                                                              </Modal>
                                                            </MediaModalComponent>
                                                          </Connect(MediaModalComponent)>
                                                        </div>
                                                      </MediaField>
                                                    </ComponentWrapper>
                                                  </Control>
                                                </Connect(Control)>
                                              </Modeled(Connect(Control))>
                                            </DefaultConnectedControl>
                                          </MediaField>
                                        </div>
                                      </li>
                                    </ul>
                                  </div>
                                </Component>
                              </ComponentWrapper>
                            </Control>
                          </Connect(Control)>
                        </Modeled(Connect(Control))>
                      </FormGroup>
                    </Connect(FormGroup)>
                  </div>
                </MetadataFormFields>
              </Connect(MetadataFormFields)>
              <div
                className="form-group"
              >
                <ul
                  className="search__filter"
                >
                  <li
                    className="attachments-list"
                  >
                    <Connect(Translate)>
                      <Translate
                        context="System"
                        edit={[Function]}
                        i18nmode={true}
                        translationKey="Document"
                      >
                        <span
                          className="translation active"
                          onClick={[Function]}
                        >
                          Document
                        </span>
                      </Translate>
                    </Connect(Translate)>
                    <BrowserView>
                      <div>
                        <Dropzone
                          accept={
                            Object {
                              "application/pdf": Array [
                                ".pdf",
                              ],
                            }
                          }
                          autoFocus={false}
                          className="dropzone"
                          disabled={false}
                          getFilesFromEvent={[Function]}
                          maxFiles={0}
                          maxSize={Infinity}
                          minSize={0}
                          multiple={true}
                          noClick={false}
                          noDrag={false}
                          noDragEventsBubbling={false}
                          noKeyboard={false}
                          onDrop={[Function]}
                          preventDropOnDocument={true}
                          useFsAccessApi={true}
                          validator={null}
                        >
                          <div
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragEnter={[Function]}
                            onDragLeave={[Function]}
                            onDragOver={[Function]}
                            onDrop={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            role="presentation"
                            tabIndex={0}
                          >
                            <label>
                              <div
                                className="text-content"
                              >
                                <div
                                  id="icon"
                                >
                                  <Connect(Icon)
                                    icon="cloud-upload-alt"
                                  >
                                    <Icon
                                      directionAware={false}
                                      icon="cloud-upload-alt"
                                      locale="en"
                                    >
                                      <FontAwesomeIcon
                                        beat={false}
                                        beatFade={false}
                                        border={false}
                                        bounce={false}
                                        className=""
                                        fade={false}
                                        fixedWidth={false}
                                        flip={null}
                                        icon="cloud-upload-alt"
                                        inverse={false}
                                        listItem={false}
                                        mask={null}
                                        maskId={null}
                                        pull={null}
                                        pulse={false}
                                        rotation={null}
                                        shake={false}
                                        size={null}
                                        spin={false}
                                        spinPulse={false}
                                        spinReverse={false}
                                        swapOpacity={false}
                                        symbol={false}
                                        title=""
                                        titleId={null}
                                        transform={null}
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="svg-inline--fa fa-cloud-upload-alt fa-w-20 "
                                          data-icon="cloud-upload-alt"
                                          data-prefix="fas"
                                          focusable="false"
                                          role="img"
                                          style={Object {}}
                                          viewBox="0 0 640 512"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M537.6 226.6c4.1-10.7 6.4-22.4 6.4-34.6 0-53-43-96-96-96-19.7 0-38.1 6-53.3 16.2C367 64.2 315.3 32 256 32c-88.4 0-160 71.6-160 160 0 2.7.1 5.4.2 8.1C40.2 219.8 0 273.2 0 336c0 79.5 64.5 144 144 144h368c70.7 0 128-57.3 128-128 0-61.9-44-113.6-102.4-125.4zM393.4 288H328v112c0 8.8-7.2 16-16 16h-48c-8.8 0-16-7.2-16-16V288h-65.4c-14.3 0-21.4-17.2-11.3-27.3l105.4-105.4c6.2-6.2 16.4-6.2 22.6 0l105.4 105.4c10.1 10.1 2.9 27.3-11.3 27.3z"
                                            fill="currentColor"
                                            style={Object {}}
                                          />
                                        </svg>
                                      </FontAwesomeIcon>
                                    </Icon>
                                  </Connect(Icon)>
                                </div>
                                <div
                                  id="upload-text"
                                >
                                  <Connect(Translate)>
                                    <Translate
                                      context="System"
                                      edit={[Function]}
                                      i18nmode={true}
                                      translationKey="Drop your files here to upload or"
                                    >
                                      <span
                                        className="translation active"
                                        onClick={[Function]}
                                      >
                                        Drop your files here to upload or
                                      </span>
                                    </Translate>
                                  </Connect(Translate)>
                                </div>
                                <div
                                  id="upload-button"
                                >
                                  <div
                                    id="button"
                                  >
                                    <Connect(Translate)>
                                      <Translate
                                        context="System"
                                        edit={[Function]}
                                        i18nmode={true}
                                        translationKey="Select files on your device"
                                      >
                                        <span
                                          className="translation active"
                                          onClick={[Function]}
                                        >
                                          Select files on your device
                                        </span>
                                      </Translate>
                                    </Connect(Translate)>
                                  </div>
                                </div>
                              </div>
                            </label>
                          </div>
                        </Dropzone>
                      </div>
                    </BrowserView>
                    <MobileView />
                    <div
                      className="preview-list"
                    >
                      <ul />
                    </div>
                  </li>
                </ul>
              </div>
              <div
                className="form-group"
              >
                <ul
                  className="search__filter"
                >
                  <li
                    className="attachments-list"
                  >
                    <Connect(Translate)>
                      <Translate
                        context="System"
                        edit={[Function]}
                        i18nmode={true}
                        translationKey="Attachments"
                      >
                        <span
                          className="translation active"
                          onClick={[Function]}
                        >
                          Attachments
                        </span>
                      </Translate>
                    </Connect(Translate)>
                    <BrowserView>
                      <div>
                        <Dropzone
                          autoFocus={false}
                          className="dropzone"
                          disabled={false}
                          getFilesFromEvent={[Function]}
                          maxFiles={0}
                          maxSize={Infinity}
                          minSize={0}
                          multiple={true}
                          noClick={false}
                          noDrag={false}
                          noDragEventsBubbling={false}
                          noKeyboard={false}
                          onDrop={[Function]}
                          preventDropOnDocument={true}
                          useFsAccessApi={true}
                          validator={null}
                        >
                          <div
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragEnter={[Function]}
                            onDragLeave={[Function]}
                            onDragOver={[Function]}
                            onDrop={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            role="presentation"
                            tabIndex={0}
                          >
                            <label>
                              <div
                                className="text-content"
                              >
                                <div
                                  id="icon"
                                >
                                  <Connect(Icon)
                                    icon="cloud-upload-alt"
                                  >
                                    <Icon
                                      directionAware={false}
                                      icon="cloud-upload-alt"
                                      locale="en"
                                    >
                                      <FontAwesomeIcon
                                        beat={false}
                                        beatFade={false}
                                        border={false}
                                        bounce={false}
                                        className=""
                                        fade={false}
                                        fixedWidth={false}
                                        flip={null}
                                        icon="cloud-upload-alt"
                                        inverse={false}
                                        listItem={false}
                                        mask={null}
                                        maskId={null}
                                        pull={null}
                                        pulse={false}
                                        rotation={null}
                                        shake={false}
                                        size={null}
                                        spin={false}
                                        spinPulse={false}
                                        spinReverse={false}
                                        swapOpacity={false}
                                        symbol={false}
                                        title=""
                                        titleId={null}
                                        transform={null}
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="svg-inline--fa fa-cloud-upload-alt fa-w-20 "
                                          data-icon="cloud-upload-alt"
                                          data-prefix="fas"
                                          focusable="false"
                                          role="img"
                                          style={Object {}}
                                          viewBox="0 0 640 512"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M537.6 226.6c4.1-10.7 6.4-22.4 6.4-34.6 0-53-43-96-96-96-19.7 0-38.1 6-53.3 16.2C367 64.2 315.3 32 256 32c-88.4 0-160 71.6-160 160 0 2.7.1 5.4.2 8.1C40.2 219.8 0 273.2 0 336c0 79.5 64.5 144 144 144h368c70.7 0 128-57.3 128-128 0-61.9-44-113.6-102.4-125.4zM393.4 288H328v112c0 8.8-7.2 16-16 16h-48c-8.8 0-16-7.2-16-16V288h-65.4c-14.3 0-21.4-17.2-11.3-27.3l105.4-105.4c6.2-6.2 16.4-6.2 22.6 0l105.4 105.4c10.1 10.1 2.9 27.3-11.3 27.3z"
                                            fill="currentColor"
                                            style={Object {}}
                                          />
                                        </svg>
                                      </FontAwesomeIcon>
                                    </Icon>
                                  </Connect(Icon)>
                                </div>
                                <div
                                  id="upload-text"
                                >
                                  <Connect(Translate)>
                                    <Translate
                                      context="System"
                                      edit={[Function]}
                                      i18nmode={true}
                                      translationKey="Drop your files here to upload or"
                                    >
                                      <span
                                        className="translation active"
                                        onClick={[Function]}
                                      >
                                        Drop your files here to upload or
                                      </span>
                                    </Translate>
                                  </Connect(Translate)>
                                </div>
                                <div
                                  id="upload-button"
                                >
                                  <div
                                    id="button"
                                  >
                                    <Connect(Translate)>
                                      <Translate
                                        context="System"
                                        edit={[Function]}
                                        i18nmode={true}
                                        translationKey="Select files on your device"
                                      >
                                        <span
                                          className="translation active"
                                          onClick={[Function]}
                                        >
                                          Select files on your device
                                        </span>
                                      </Translate>
                                    </Connect(Translate)>
                                  </div>
                                </div>
                              </div>
                            </label>
                          </div>
                        </Dropzone>
                      </div>
                    </BrowserView>
                    <MobileView />
                    <div
                      className="preview-list"
                    >
                      <ul />
                    </div>
                  </li>
                </ul>
              </div>
              <Connect(FormGroup)
                key="captcha"
                model=".captcha"
              >
                <FormGroup
                  className=""
                  dispatch={[Function]}
                  hasError={false}
                  model=".captcha"
                >
                  <Modeled(Connect(Control))
                    component={[Function]}
                    mapProps={
                      Object {
                        "className": [Function],
                      }
                    }
                    model=".captcha"
                  >
                    <Connect(Control)
                      component={[Function]}
                      mapProps={
                        Object {
                          "className": [Function],
                        }
                      }
                      model="publicform.captcha"
                      store={
                        Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(observable): [Function],
                        }
                      }
                    >
                      <Control
                        asyncValidateOn="blur"
                        changeAction={[Function]}
                        component={[Function]}
                        controlProps={
                          Object {
                            "children": <ul
                              className="search__filter"
                            >
                              <li>
                                <label>
                                  <Connect(Translate)>
                                    Captcha
                                  </Connect(Translate)>
                                  <span
                                    className="required"
                                  >
                                    *
                                  </span>
                                </label>
                              </li>
                              <li
                                className="wide"
                              >
                                <Captcha
                                  model=".captcha"
                                  refresh={[Function]}
                                  remote={false}
                                />
                              </li>
                            </ul>,
                          }
                        }
                        dispatch={[Function]}
                        dynamic={false}
                        fieldValue={
                          Object {
                            "errors": Object {
                              "required": true,
                            },
                            "focus": false,
                            "initialValue": null,
                            "intents": Array [],
                            "model": "publicform.captcha",
                            "pending": false,
                            "pristine": true,
                            "retouched": false,
                            "submitFailed": false,
                            "submitted": false,
                            "touched": false,
                            "valid": false,
                            "validated": true,
                            "validating": false,
                            "validity": Object {
                              "required": false,
                            },
                            "value": null,
                          }
                        }
                        getValue={[Function]}
                        ignore={Array []}
                        isToggle={false}
                        mapProps={
                          Object {
                            "className": [Function],
                          }
                        }
                        model="publicform.captcha"
                        parser={[Function]}
                        persist={false}
                        store={
                          Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          }
                        }
                        storeSubscription={
                          Subscription {
                            "listeners": Object {
                              "clear": [Function],
                              "get": [Function],
                              "notify": [Function],
                              "subscribe": [Function],
                            },
                            "onStateChange": [Function],
                            "parentSub": undefined,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                            "unsubscribe": [Function],
                          }
                        }
                        updateOn="change"
                        updateOnEnter={true}
                        withField={true}
                      >
                        <ComponentWrapper
                          className=""
                          component={[Function]}
                        >
                          <Component
                            className=""
                          >
                            <div
                              className="form-group  "
                            >
                              <ul
                                className="search__filter"
                              >
                                <li>
                                  <label>
                                    <Connect(Translate)>
                                      <Translate
                                        context="System"
                                        edit={[Function]}
                                        i18nmode={true}
                                        translationKey="Captcha"
                                      >
                                        <span
                                          className="translation active"
                                          onClick={[Function]}
                                        >
                                          Captcha
                                        </span>
                                      </Translate>
                                    </Connect(Translate)>
                                    <span
                                      className="required"
                                    >
                                      *
                                    </span>
                                  </label>
                                </li>
                                <li
                                  className="wide"
                                >
                                  <Captcha
                                    model=".captcha"
                                    refresh={
                                      [MockFunction] {
                                        "calls": Array [
                                          Array [
                                            [MockFunction] {
                                              "calls": [Circular],
                                              "results": Array [
                                                Object {
                                                  "type": "return",
                                                  "value": undefined,
                                                },
                                              ],
                                            },
                                          ],
                                        ],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      }
                                    }
                                    remote={false}
                                  >
                                    <DefaultConnectedControl
                                      component={[Function]}
                                      model=".captcha"
                                      refresh={[Function]}
                                      remote={false}
                                    >
                                      <Modeled(Connect(Control))
                                        component={[Function]}
                                        mapProps={
                                          Object {
                                            "disabled": [Function],
                                            "name": [Function],
                                            "onBlur": [Function],
                                            "onChange": [Function],
                                            "onFocus": [Function],
                                            "onKeyPress": [Function],
                                            "value": [Function],
                                          }
                                        }
                                        model=".captcha"
                                        refresh={[Function]}
                                        remote={false}
                                      >
                                        <Connect(Control)
                                          component={[Function]}
                                          mapProps={
                                            Object {
                                              "disabled": [Function],
                                              "name": [Function],
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "onFocus": [Function],
                                              "onKeyPress": [Function],
                                              "value": [Function],
                                            }
                                          }
                                          model="publicform.captcha"
                                          refresh={[Function]}
                                          remote={false}
                                          store={
                                            Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            }
                                          }
                                        >
                                          <Control
                                            asyncValidateOn="blur"
                                            changeAction={[Function]}
                                            component={[Function]}
                                            controlProps={
                                              Object {
                                                "refresh": [Function],
                                                "remote": false,
                                              }
                                            }
                                            dispatch={[Function]}
                                            dynamic={false}
                                            fieldValue={
                                              Object {
                                                "errors": Object {
                                                  "required": true,
                                                },
                                                "focus": false,
                                                "initialValue": null,
                                                "intents": Array [],
                                                "model": "publicform.captcha",
                                                "pending": false,
                                                "pristine": true,
                                                "retouched": false,
                                                "submitFailed": false,
                                                "submitted": false,
                                                "touched": false,
                                                "valid": false,
                                                "validated": true,
                                                "validating": false,
                                                "validity": Object {
                                                  "required": false,
                                                },
                                                "value": null,
                                              }
                                            }
                                            getValue={[Function]}
                                            ignore={Array []}
                                            isToggle={false}
                                            mapProps={
                                              Object {
                                                "disabled": [Function],
                                                "name": [Function],
                                                "onBlur": [Function],
                                                "onChange": [Function],
                                                "onFocus": [Function],
                                                "onKeyPress": [Function],
                                                "value": [Function],
                                              }
                                            }
                                            model="publicform.captcha"
                                            parser={[Function]}
                                            persist={false}
                                            refresh={[Function]}
                                            remote={false}
                                            store={
                                              Object {
                                                "dispatch": [Function],
                                                "getState": [Function],
                                                "replaceReducer": [Function],
                                                "subscribe": [Function],
                                                Symbol(observable): [Function],
                                              }
                                            }
                                            storeSubscription={
                                              Subscription {
                                                "listeners": Object {
                                                  "clear": [Function],
                                                  "get": [Function],
                                                  "notify": [Function],
                                                  "subscribe": [Function],
                                                },
                                                "onStateChange": [Function],
                                                "parentSub": undefined,
                                                "store": Object {
                                                  "dispatch": [Function],
                                                  "getState": [Function],
                                                  "replaceReducer": [Function],
                                                  "subscribe": [Function],
                                                  Symbol(observable): [Function],
                                                },
                                                "unsubscribe": [Function],
                                              }
                                            }
                                            updateOn="change"
                                            updateOnEnter={true}
                                            withField={true}
                                          >
                                            <ComponentWrapper
                                              component={[Function]}
                                              disabled={false}
                                              name="publicform.captcha"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyPress={[Function]}
                                              refresh={[Function]}
                                              remote={false}
                                            >
                                              <Captcha
                                                disabled={false}
                                                name="publicform.captcha"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyPress={[Function]}
                                                refresh={[Function]}
                                                remote={false}
                                                value={
                                                  Object {
                                                    "id": "",
                                                    "text": "",
                                                  }
                                                }
                                              >
                                                <div
                                                  className="captcha"
                                                >
                                                  <div
                                                    dangerouslySetInnerHTML={
                                                      Object {
                                                        "__html": "",
                                                      }
                                                    }
                                                  />
                                                  <input
                                                    className="form-control"
                                                    onChange={[Function]}
                                                    value=""
                                                  />
                                                </div>
                                              </Captcha>
                                            </ComponentWrapper>
                                          </Control>
                                        </Connect(Control)>
                                      </Modeled(Connect(Control))>
                                    </DefaultConnectedControl>
                                  </Captcha>
                                </li>
                              </ul>
                            </div>
                          </Component>
                        </ComponentWrapper>
                      </Control>
                    </Connect(Control)>
                  </Modeled(Connect(Control))>
                </FormGroup>
              </Connect(FormGroup)>
              <button
                className="btn btn-success"
                type="submit"
              >
                <Connect(Translate)>
                  <Translate
                    context="System"
                    edit={[Function]}
                    i18nmode={true}
                    translationKey="Submit"
                  >
                    <span
                      className="translation active"
                      onClick={[Function]}
                    >
                      Submit
                    </span>
                  </Translate>
                </Connect(Translate)>
              </button>
            </div>
          </form>
        </Form>
      </Connect(Form)>
    </LocalForm>
  </PublicForm>
</Provider>
`;
